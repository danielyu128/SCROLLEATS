{"ast":null,"code":"import axios from 'axios';\n// API Configuration\nconst API_CONFIG = {\n  GOOGLE_PLACES_API_KEY: 'AIzaSyBTVjUUH3_41kpP83RczmHl2OdlVYNDyCA',\n  YELP_API_KEY: process.env.REACT_APP_YELP_API_KEY,\n  AI_API_ENDPOINT: process.env.REACT_APP_AI_API_ENDPOINT,\n  FIREBASE_CONFIG: {\n    apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n    authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n    projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n    appId: process.env.REACT_APP_FIREBASE_APP_ID\n  }\n};\n\n// Cache for API responses\nconst cache = new Map();\nconst CACHE_DURATION = 5 * 60 * 1000; // 5 minutes\n\n// Helper function to get cached data\nconst getCachedData = key => {\n  const cached = cache.get(key);\n  if (cached && Date.now() - cached.timestamp < CACHE_DURATION) {\n    return cached.data;\n  }\n  return null;\n};\n\n// Helper function to set cached data\nconst setCachedData = (key, data) => {\n  cache.set(key, {\n    data,\n    timestamp: Date.now()\n  });\n};\n\n// Helper function to convert price level to price range\nconst convertPriceLevelToRange = priceLevel => {\n  if (!priceLevel) return 'moderate';\n  switch (priceLevel) {\n    case 1:\n      return 'budget';\n    case 2:\n      return 'moderate';\n    case 3:\n      return 'expensive';\n    case 4:\n      return 'luxury';\n    default:\n      return 'moderate';\n  }\n};\n\n// Helper function to convert Yelp price to price range\nconst convertYelpPriceToRange = price => {\n  if (!price) return 'moderate';\n  switch (price) {\n    case '$':\n      return 'budget';\n    case '$$':\n      return 'moderate';\n    case '$$$':\n      return 'expensive';\n    case '$$$$':\n      return 'luxury';\n    default:\n      return 'moderate';\n  }\n};\n\n// Fallback restaurant data for when API fails\nconst fallbackRestaurants = [{\n  id: 'fallback1',\n  name: 'Local Bistro',\n  description: 'A cozy local bistro serving fresh, seasonal dishes',\n  cuisine: 'American',\n  priceRange: 'moderate',\n  rating: 4.2,\n  reviewCount: 45,\n  address: '123 Main St',\n  city: 'Your City',\n  state: 'CA',\n  zipCode: '12345',\n  phone: '(555) 123-4567',\n  website: '',\n  hours: {},\n  images: ['https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=800'],\n  tags: ['Local', 'American', 'Casual'],\n  coordinates: {\n    latitude: 37.7749,\n    longitude: -122.4194\n  },\n  distance: 0.5,\n  isOpen: true,\n  deliveryAvailable: true,\n  takeoutAvailable: true,\n  dineInAvailable: true,\n  features: [],\n  dietaryOptions: [],\n  createdAt: new Date(),\n  updatedAt: new Date()\n}, {\n  id: 'fallback2',\n  name: 'Pizza Palace',\n  description: 'Authentic Italian pizza and pasta made with fresh ingredients',\n  cuisine: 'Italian',\n  priceRange: 'moderate',\n  rating: 4.5,\n  reviewCount: 78,\n  address: '456 Oak Ave',\n  city: 'Your City',\n  state: 'CA',\n  zipCode: '12345',\n  phone: '(555) 987-6543',\n  website: '',\n  hours: {},\n  images: ['https://images.unsplash.com/photo-1513104890138-7c749659a591?w=800'],\n  tags: ['Italian', 'Pizza', 'Pasta'],\n  coordinates: {\n    latitude: 37.7849,\n    longitude: -122.4094\n  },\n  distance: 1.2,\n  isOpen: true,\n  deliveryAvailable: true,\n  takeoutAvailable: true,\n  dineInAvailable: true,\n  features: [],\n  dietaryOptions: [],\n  createdAt: new Date(),\n  updatedAt: new Date()\n}, {\n  id: 'fallback3',\n  name: 'Sushi Master',\n  description: 'Premium sushi and sashimi with the freshest fish',\n  cuisine: 'Japanese',\n  priceRange: 'expensive',\n  rating: 4.7,\n  reviewCount: 156,\n  address: '789 Pine St',\n  city: 'Your City',\n  state: 'CA',\n  zipCode: '12345',\n  phone: '(555) 456-7890',\n  website: '',\n  hours: {},\n  images: ['https://images.unsplash.com/photo-1579584425555-c3ce17fd4351?w=800'],\n  tags: ['Japanese', 'Sushi', 'Fine Dining'],\n  coordinates: {\n    latitude: 37.7949,\n    longitude: -122.3994\n  },\n  distance: 1.8,\n  isOpen: true,\n  deliveryAvailable: false,\n  takeoutAvailable: true,\n  dineInAvailable: true,\n  features: [],\n  dietaryOptions: [],\n  createdAt: new Date(),\n  updatedAt: new Date()\n}, {\n  id: 'fallback4',\n  name: 'Taco Truck',\n  description: 'Authentic Mexican street food with bold flavors',\n  cuisine: 'Mexican',\n  priceRange: 'budget',\n  rating: 4.3,\n  reviewCount: 92,\n  address: '321 Food Truck Lane',\n  city: 'Your City',\n  state: 'CA',\n  zipCode: '12345',\n  phone: '(555) 321-6540',\n  website: '',\n  hours: {},\n  images: ['https://images.unsplash.com/photo-1565299624946-b28f40a0ca4b?w=800'],\n  tags: ['Mexican', 'Street Food', 'Tacos'],\n  coordinates: {\n    latitude: 37.8049,\n    longitude: -122.3894\n  },\n  distance: 2.3,\n  isOpen: true,\n  deliveryAvailable: true,\n  takeoutAvailable: true,\n  dineInAvailable: false,\n  features: [],\n  dietaryOptions: [],\n  createdAt: new Date(),\n  updatedAt: new Date()\n}, {\n  id: 'fallback5',\n  name: 'Burger Joint',\n  description: 'Classic American burgers with hand-cut fries',\n  cuisine: 'American',\n  priceRange: 'moderate',\n  rating: 4.1,\n  reviewCount: 67,\n  address: '654 Burger Blvd',\n  city: 'Your City',\n  state: 'CA',\n  zipCode: '12345',\n  phone: '(555) 654-3210',\n  website: '',\n  hours: {},\n  images: ['https://images.unsplash.com/photo-1565299624946-b28f40a0ca4b?w=800'],\n  tags: ['American', 'Burgers', 'Casual'],\n  coordinates: {\n    latitude: 37.8149,\n    longitude: -122.3794\n  },\n  distance: 2.8,\n  isOpen: true,\n  deliveryAvailable: true,\n  takeoutAvailable: true,\n  dineInAvailable: true,\n  features: [],\n  dietaryOptions: [],\n  createdAt: new Date(),\n  updatedAt: new Date()\n}];\n\n// Google Places API\nexport const googlePlacesAPI = {\n  async searchNearby(latitude, longitude, radius = 5000, type = 'restaurant') {\n    const cacheKey = `google_places_${latitude}_${longitude}_${radius}_${type}`;\n    const cached = getCachedData(cacheKey);\n    if (cached) return cached;\n    try {\n      console.log('Fetching restaurants from Google Places API...');\n      console.log('Location:', latitude, longitude);\n      console.log('Radius:', radius);\n      console.log('API Key:', API_CONFIG.GOOGLE_PLACES_API_KEY.substring(0, 10) + '...');\n      let allRestaurants = [];\n      let nextPageToken;\n      let pageCount = 0;\n      const maxPages = 3; // Get up to 60 restaurants (20 per page)\n\n      do {\n        var _response$data$result;\n        const params = {\n          location: `${latitude},${longitude}`,\n          radius: Math.min(radius, 50000),\n          // Max 50km\n          type,\n          key: API_CONFIG.GOOGLE_PLACES_API_KEY,\n          rankby: 'rating',\n          // Sort by rating\n          opennow: true // Only show open restaurants\n        };\n        if (nextPageToken) {\n          params.pagetoken = nextPageToken;\n        }\n\n        // Try direct API call first\n        let response;\n        try {\n          console.log(`Making API call for page ${pageCount + 1}...`);\n          const apiUrl = `https://maps.googleapis.com/maps/api/place/nearbysearch/json?${new URLSearchParams(params)}`;\n          console.log('API URL:', apiUrl.replace(API_CONFIG.GOOGLE_PLACES_API_KEY, 'API_KEY_HIDDEN'));\n          response = await axios.get(apiUrl, {\n            timeout: 15000\n          });\n        } catch (apiError) {\n          console.error('Direct API call failed:', apiError);\n\n          // If it's a CORS error, try with a different proxy\n          if (axios.isAxiosError(apiError) && (apiError.code === 'ERR_NETWORK' || apiError.message.includes('CORS'))) {\n            console.log('CORS error detected, trying with proxy...');\n            try {\n              // Try a different CORS proxy\n              const proxyUrl = 'https://cors-anywhere.herokuapp.com/';\n              const apiUrl = `https://maps.googleapis.com/maps/api/place/nearbysearch/json?${new URLSearchParams(params)}`;\n              response = await axios.get(`${proxyUrl}${apiUrl}`, {\n                timeout: 20000,\n                headers: {\n                  'Origin': window.location.origin\n                }\n              });\n            } catch (proxyError) {\n              console.error('Proxy also failed:', proxyError);\n              throw new Error('Both direct API and proxy calls failed');\n            }\n          } else {\n            throw apiError;\n          }\n        }\n        console.log(`Page ${pageCount + 1} response status:`, response.data.status);\n        console.log(`Page ${pageCount + 1} results count:`, ((_response$data$result = response.data.results) === null || _response$data$result === void 0 ? void 0 : _response$data$result.length) || 0);\n        if (response.data.status !== 'OK' && response.data.status !== 'ZERO_RESULTS') {\n          console.error('API Error:', response.data.status, response.data.error_message);\n          throw new Error(`Google Places API error: ${response.data.status} - ${response.data.error_message || 'Unknown error'}`);\n        }\n        if (response.data.status === 'ZERO_RESULTS') {\n          console.log('No more restaurants found');\n          break;\n        }\n        const restaurants = response.data.results.map(place => {\n          var _place$types, _place$types2, _place$vicinity, _place$vicinity$split, _place$vicinity2, _place$vicinity2$spli, _place$opening_hours;\n          return {\n            id: place.place_id,\n            name: place.name,\n            description: ((_place$types = place.types) === null || _place$types === void 0 ? void 0 : _place$types.join(', ')) || 'Restaurant',\n            cuisine: ((_place$types2 = place.types) === null || _place$types2 === void 0 ? void 0 : _place$types2[0]) || 'restaurant',\n            priceRange: convertPriceLevelToRange(place.price_level),\n            rating: place.rating || 0,\n            reviewCount: place.user_ratings_total || 0,\n            address: place.vicinity || place.formatted_address || '',\n            city: ((_place$vicinity = place.vicinity) === null || _place$vicinity === void 0 ? void 0 : (_place$vicinity$split = _place$vicinity.split(',')[1]) === null || _place$vicinity$split === void 0 ? void 0 : _place$vicinity$split.trim()) || '',\n            state: ((_place$vicinity2 = place.vicinity) === null || _place$vicinity2 === void 0 ? void 0 : (_place$vicinity2$spli = _place$vicinity2.split(',')[2]) === null || _place$vicinity2$spli === void 0 ? void 0 : _place$vicinity2$spli.trim()) || '',\n            zipCode: '',\n            phone: '',\n            website: '',\n            hours: {},\n            images: place.photos ? place.photos.slice(0, 3).map(photo => `https://maps.googleapis.com/maps/api/place/photo?maxwidth=400&photoreference=${photo.photo_reference}&key=${API_CONFIG.GOOGLE_PLACES_API_KEY}`) : ['https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=800'],\n            tags: place.types || [],\n            coordinates: {\n              latitude: place.geometry.location.lat,\n              longitude: place.geometry.location.lng\n            },\n            distance: 0,\n            // Will be calculated later\n            isOpen: ((_place$opening_hours = place.opening_hours) === null || _place$opening_hours === void 0 ? void 0 : _place$opening_hours.open_now) || false,\n            deliveryAvailable: false,\n            takeoutAvailable: false,\n            dineInAvailable: true,\n            features: [],\n            dietaryOptions: [],\n            createdAt: new Date(),\n            updatedAt: new Date()\n          };\n        });\n        allRestaurants.push(...restaurants);\n        nextPageToken = response.data.next_page_token;\n        pageCount++;\n\n        // Wait 2 seconds before requesting next page (Google API requirement)\n        if (nextPageToken && pageCount < maxPages) {\n          console.log('Waiting 2 seconds before next page...');\n          await new Promise(resolve => setTimeout(resolve, 2000));\n        }\n      } while (nextPageToken && pageCount < maxPages);\n\n      // Calculate distances\n      allRestaurants.forEach(restaurant => {\n        const lat1 = latitude;\n        const lon1 = longitude;\n        const lat2 = restaurant.coordinates.latitude;\n        const lon2 = restaurant.coordinates.longitude;\n\n        // Haversine formula to calculate distance\n        const R = 3959; // Earth's radius in miles\n        const dLat = (lat2 - lat1) * Math.PI / 180;\n        const dLon = (lon2 - lon1) * Math.PI / 180;\n        const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n        restaurant.distance = R * c;\n      });\n\n      // Sort by distance\n      allRestaurants.sort((a, b) => (a.distance || 0) - (b.distance || 0));\n      console.log(`Found ${allRestaurants.length} restaurants total`);\n      if (allRestaurants.length === 0) {\n        console.log('No restaurants found, using fallback data');\n        return fallbackRestaurants.map(restaurant => ({\n          ...restaurant,\n          coordinates: {\n            latitude,\n            longitude\n          },\n          distance: Math.random() * 2 + 0.1\n        }));\n      }\n      setCachedData(cacheKey, allRestaurants);\n      return allRestaurants;\n    } catch (error) {\n      console.error('Google Places API error:', error);\n\n      // Return fallback data if API fails\n      if (axios.isAxiosError(error)) {\n        var _error$response, _error$response2, _error$response2$data;\n        console.error('Axios error details:', (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data);\n\n        // Check if it's a CORS error or API key issue\n        if (error.code === 'ERR_NETWORK' || error.message.includes('CORS')) {\n          console.log('Network/CORS error detected, using fallback data');\n        } else if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.status) === 'REQUEST_DENIED') {\n          console.log('API key denied, using fallback data');\n        } else {\n          console.log('Other API error, using fallback data');\n        }\n        return fallbackRestaurants.map(restaurant => ({\n          ...restaurant,\n          coordinates: {\n            latitude,\n            longitude\n          },\n          distance: Math.random() * 2 + 0.1\n        }));\n      }\n      throw new Error(`Failed to fetch restaurants: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  },\n  async getPlaceDetails(placeId) {\n    const cacheKey = `google_place_details_${placeId}`;\n    const cached = getCachedData(cacheKey);\n    if (cached) return cached;\n    try {\n      var _place$types3, _place$types4, _place$formatted_addr, _place$formatted_addr2, _place$formatted_addr3, _place$opening_hours2, _place$opening_hours3, _place$geometry, _place$opening_hours4;\n      const response = await axios.get('https://maps.googleapis.com/maps/api/place/details/json', {\n        params: {\n          place_id: placeId,\n          fields: 'name,formatted_address,formatted_phone_number,website,opening_hours,rating,user_ratings_total,photos,types,price_level,geometry',\n          key: API_CONFIG.GOOGLE_PLACES_API_KEY\n        },\n        timeout: 10000\n      });\n      if (response.data.status !== 'OK') {\n        throw new Error(`Google Places Details API error: ${response.data.status}`);\n      }\n      const place = response.data.result;\n      const restaurant = {\n        id: placeId,\n        name: place.name,\n        description: ((_place$types3 = place.types) === null || _place$types3 === void 0 ? void 0 : _place$types3.join(', ')) || '',\n        cuisine: ((_place$types4 = place.types) === null || _place$types4 === void 0 ? void 0 : _place$types4[0]) || 'restaurant',\n        priceRange: convertPriceLevelToRange(place.price_level),\n        rating: place.rating || 0,\n        reviewCount: place.user_ratings_total || 0,\n        address: place.formatted_address,\n        city: ((_place$formatted_addr = place.formatted_address.split(',')[1]) === null || _place$formatted_addr === void 0 ? void 0 : _place$formatted_addr.trim()) || '',\n        state: ((_place$formatted_addr2 = place.formatted_address.split(',')[2]) === null || _place$formatted_addr2 === void 0 ? void 0 : _place$formatted_addr2.trim()) || '',\n        zipCode: ((_place$formatted_addr3 = place.formatted_address.split(',')[3]) === null || _place$formatted_addr3 === void 0 ? void 0 : _place$formatted_addr3.trim()) || '',\n        phone: place.formatted_phone_number || '',\n        website: place.website || '',\n        hours: ((_place$opening_hours2 = place.opening_hours) === null || _place$opening_hours2 === void 0 ? void 0 : (_place$opening_hours3 = _place$opening_hours2.weekday_text) === null || _place$opening_hours3 === void 0 ? void 0 : _place$opening_hours3.reduce((acc, day) => {\n          const [dayName, hours] = day.split(': ');\n          acc[dayName] = hours;\n          return acc;\n        }, {})) || {},\n        images: place.photos ? place.photos.slice(0, 5).map(photo => `https://maps.googleapis.com/maps/api/place/photo?maxwidth=400&photoreference=${photo.photo_reference}&key=${API_CONFIG.GOOGLE_PLACES_API_KEY}`) : ['https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=800'],\n        tags: place.types || [],\n        coordinates: (_place$geometry = place.geometry) !== null && _place$geometry !== void 0 && _place$geometry.location ? {\n          latitude: place.geometry.location.lat,\n          longitude: place.geometry.location.lng\n        } : {\n          latitude: 0,\n          longitude: 0\n        },\n        isOpen: ((_place$opening_hours4 = place.opening_hours) === null || _place$opening_hours4 === void 0 ? void 0 : _place$opening_hours4.open_now) || false,\n        deliveryAvailable: false,\n        takeoutAvailable: false,\n        dineInAvailable: true,\n        features: [],\n        dietaryOptions: [],\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n      setCachedData(cacheKey, restaurant);\n      return restaurant;\n    } catch (error) {\n      console.error('Google Places Details API error:', error);\n      throw error;\n    }\n  },\n  async getPlaceReviews(placeId) {\n    const cacheKey = `google_place_reviews_${placeId}`;\n    const cached = getCachedData(cacheKey);\n    if (cached) return cached;\n    try {\n      const response = await axios.get('https://maps.googleapis.com/maps/api/place/details/json', {\n        params: {\n          place_id: placeId,\n          fields: 'reviews',\n          key: API_CONFIG.GOOGLE_PLACES_API_KEY\n        },\n        timeout: 10000\n      });\n      if (response.data.status !== 'OK') {\n        throw new Error(`Google Places Reviews API error: ${response.data.status}`);\n      }\n      const reviews = response.data.result.reviews || [];\n      setCachedData(cacheKey, reviews);\n      return reviews;\n    } catch (error) {\n      console.error('Google Places Reviews API error:', error);\n      return []; // Return empty array instead of throwing\n    }\n  }\n};\n\n// Yelp API\nexport const yelpAPI = {\n  async searchBusinesses(latitude, longitude, radius = 5000, limit = 20) {\n    const cacheKey = `yelp_${latitude}_${longitude}_${radius}_${limit}`;\n    const cached = getCachedData(cacheKey);\n    if (cached) return cached;\n    try {\n      const response = await axios.get('https://api.yelp.com/v3/businesses/search', {\n        headers: {\n          Authorization: `Bearer ${API_CONFIG.YELP_API_KEY}`\n        },\n        params: {\n          latitude,\n          longitude,\n          radius,\n          limit,\n          categories: 'restaurants',\n          sort_by: 'rating'\n        }\n      });\n      const restaurants = response.data.businesses.map(business => {\n        var _business$categories$;\n        return {\n          id: business.id,\n          name: business.name,\n          description: business.categories.map(cat => cat.title).join(', '),\n          cuisine: ((_business$categories$ = business.categories[0]) === null || _business$categories$ === void 0 ? void 0 : _business$categories$.title) || 'restaurant',\n          priceRange: convertYelpPriceToRange(business.price),\n          rating: business.rating,\n          reviewCount: business.review_count,\n          address: business.location.address1,\n          city: business.location.city,\n          state: business.location.state,\n          zipCode: business.location.zip_code,\n          phone: business.phone,\n          website: business.url,\n          hours: {},\n          images: [business.image_url],\n          tags: business.categories.map(cat => cat.title),\n          coordinates: {\n            latitude: business.coordinates.latitude,\n            longitude: business.coordinates.longitude\n          },\n          distance: business.distance / 1609.34,\n          // Convert meters to miles\n          isOpen: true,\n          // Yelp doesn't provide real-time open status\n          deliveryAvailable: business.transactions.includes('delivery'),\n          takeoutAvailable: business.transactions.includes('pickup'),\n          dineInAvailable: business.transactions.includes('restaurant_reservation'),\n          features: business.transactions,\n          dietaryOptions: [],\n          createdAt: new Date(),\n          updatedAt: new Date()\n        };\n      });\n      setCachedData(cacheKey, restaurants);\n      return restaurants;\n    } catch (error) {\n      console.error('Yelp API error:', error);\n      throw error;\n    }\n  }\n};\n\n// AI Recommendations API\nexport const aiAPI = {\n  async getRecommendations(request) {\n    try {\n      const response = await axios.post(`${API_CONFIG.AI_API_ENDPOINT}/recommendations`, request, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('AI Recommendations API error:', error);\n      throw error;\n    }\n  },\n  async analyzeUserPreferences(userId, ratings) {\n    try {\n      const response = await axios.post(`${API_CONFIG.AI_API_ENDPOINT}/analyze-preferences`, {\n        userId,\n        ratings\n      }, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('AI Analysis API error:', error);\n      throw error;\n    }\n  }\n};\n\n// Firebase integration for user data\nexport const firebaseAPI = {\n  async saveUserRating(rating) {\n    // This would integrate with Firebase Firestore\n    console.log('Saving rating to Firebase:', rating);\n  },\n  async getUserRatings(userId) {\n    // This would fetch from Firebase Firestore\n    console.log('Fetching ratings from Firebase for user:', userId);\n    return [];\n  },\n  async updateUserPreferences(userId, preferences) {\n    // This would update Firebase Firestore\n    console.log('Updating preferences in Firebase for user:', userId, preferences);\n  }\n};\n\n// Combined API service\nexport const apiService = {\n  async getNearbyRestaurants(latitude, longitude, radius = 5000) {\n    try {\n      // Try Google Places first, fallback to Yelp\n      const googleResults = await googlePlacesAPI.searchNearby(latitude, longitude, radius);\n      if (googleResults.length > 0) {\n        return googleResults;\n      }\n      const yelpResults = await yelpAPI.searchBusinesses(latitude, longitude, radius);\n      return yelpResults;\n    } catch (error) {\n      console.error('Error fetching nearby restaurants:', error);\n      throw error;\n    }\n  },\n  async getAIRecommendations(userId, userPreferences, recentRatings, location) {\n    try {\n      const recommendations = await aiAPI.getRecommendations({\n        userId,\n        userPreferences,\n        recentRatings,\n        location,\n        limit: 10\n      });\n\n      // Fetch full restaurant details for recommended IDs\n      const restaurants = await Promise.all(recommendations.recommendations.map(async rec => {\n        try {\n          return await googlePlacesAPI.getPlaceDetails(rec.restaurantId);\n        } catch {\n          // Fallback to basic restaurant data\n          return {\n            id: rec.restaurantId,\n            name: 'Recommended Restaurant',\n            description: rec.reasoning,\n            cuisine: 'restaurant',\n            priceRange: 'moderate',\n            rating: 0,\n            reviewCount: 0,\n            address: '',\n            city: '',\n            state: '',\n            zipCode: '',\n            phone: '',\n            hours: {},\n            images: [],\n            tags: rec.matchFactors,\n            coordinates: location,\n            isOpen: false,\n            deliveryAvailable: false,\n            takeoutAvailable: false,\n            dineInAvailable: true,\n            features: [],\n            dietaryOptions: [],\n            createdAt: new Date(),\n            updatedAt: new Date()\n          };\n        }\n      }));\n      return restaurants;\n    } catch (error) {\n      console.error('Error getting AI recommendations:', error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["axios","API_CONFIG","GOOGLE_PLACES_API_KEY","YELP_API_KEY","process","env","REACT_APP_YELP_API_KEY","AI_API_ENDPOINT","REACT_APP_AI_API_ENDPOINT","FIREBASE_CONFIG","apiKey","REACT_APP_FIREBASE_API_KEY","authDomain","REACT_APP_FIREBASE_AUTH_DOMAIN","projectId","REACT_APP_FIREBASE_PROJECT_ID","storageBucket","REACT_APP_FIREBASE_STORAGE_BUCKET","messagingSenderId","REACT_APP_FIREBASE_MESSAGING_SENDER_ID","appId","REACT_APP_FIREBASE_APP_ID","cache","Map","CACHE_DURATION","getCachedData","key","cached","get","Date","now","timestamp","data","setCachedData","set","convertPriceLevelToRange","priceLevel","convertYelpPriceToRange","price","fallbackRestaurants","id","name","description","cuisine","priceRange","rating","reviewCount","address","city","state","zipCode","phone","website","hours","images","tags","coordinates","latitude","longitude","distance","isOpen","deliveryAvailable","takeoutAvailable","dineInAvailable","features","dietaryOptions","createdAt","updatedAt","googlePlacesAPI","searchNearby","radius","type","cacheKey","console","log","substring","allRestaurants","nextPageToken","pageCount","maxPages","_response$data$result","params","location","Math","min","rankby","opennow","pagetoken","response","apiUrl","URLSearchParams","replace","timeout","apiError","error","isAxiosError","code","message","includes","proxyUrl","headers","window","origin","proxyError","Error","status","results","length","error_message","restaurants","map","place","_place$types","_place$types2","_place$vicinity","_place$vicinity$split","_place$vicinity2","_place$vicinity2$spli","_place$opening_hours","place_id","types","join","price_level","user_ratings_total","vicinity","formatted_address","split","trim","photos","slice","photo","photo_reference","geometry","lat","lng","opening_hours","open_now","push","next_page_token","Promise","resolve","setTimeout","forEach","restaurant","lat1","lon1","lat2","lon2","R","dLat","PI","dLon","a","sin","cos","c","atan2","sqrt","sort","b","random","_error$response","_error$response2","_error$response2$data","getPlaceDetails","placeId","_place$types3","_place$types4","_place$formatted_addr","_place$formatted_addr2","_place$formatted_addr3","_place$opening_hours2","_place$opening_hours3","_place$geometry","_place$opening_hours4","fields","result","formatted_phone_number","weekday_text","reduce","acc","day","dayName","getPlaceReviews","reviews","yelpAPI","searchBusinesses","limit","Authorization","categories","sort_by","businesses","business","_business$categories$","cat","title","review_count","address1","zip_code","url","image_url","transactions","aiAPI","getRecommendations","request","post","analyzeUserPreferences","userId","ratings","firebaseAPI","saveUserRating","getUserRatings","updateUserPreferences","preferences","apiService","getNearbyRestaurants","googleResults","yelpResults","getAIRecommendations","userPreferences","recentRatings","recommendations","all","rec","restaurantId","reasoning","matchFactors"],"sources":["/Users/andrewnguyen/scrollEats/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\nimport { Restaurant, GooglePlacesResponse, YelpResponse, AIRecommendationRequest, AIRecommendationResponse } from '../types';\n\n// API Configuration\nconst API_CONFIG = {\n  GOOGLE_PLACES_API_KEY: 'AIzaSyBTVjUUH3_41kpP83RczmHl2OdlVYNDyCA',\n  YELP_API_KEY: process.env.REACT_APP_YELP_API_KEY,\n  AI_API_ENDPOINT: process.env.REACT_APP_AI_API_ENDPOINT,\n  FIREBASE_CONFIG: {\n    apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n    authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n    projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n    appId: process.env.REACT_APP_FIREBASE_APP_ID,\n  },\n};\n\n// Cache for API responses\nconst cache = new Map<string, { data: any; timestamp: number }>();\nconst CACHE_DURATION = 5 * 60 * 1000; // 5 minutes\n\n// Helper function to get cached data\nconst getCachedData = (key: string) => {\n  const cached = cache.get(key);\n  if (cached && Date.now() - cached.timestamp < CACHE_DURATION) {\n    return cached.data;\n  }\n  return null;\n};\n\n// Helper function to set cached data\nconst setCachedData = (key: string, data: any) => {\n  cache.set(key, { data, timestamp: Date.now() });\n};\n\n// Helper function to convert price level to price range\nconst convertPriceLevelToRange = (priceLevel?: number): Restaurant['priceRange'] => {\n  if (!priceLevel) return 'moderate';\n  switch (priceLevel) {\n    case 1: return 'budget';\n    case 2: return 'moderate';\n    case 3: return 'expensive';\n    case 4: return 'luxury';\n    default: return 'moderate';\n  }\n};\n\n// Helper function to convert Yelp price to price range\nconst convertYelpPriceToRange = (price?: string): Restaurant['priceRange'] => {\n  if (!price) return 'moderate';\n  switch (price) {\n    case '$': return 'budget';\n    case '$$': return 'moderate';\n    case '$$$': return 'expensive';\n    case '$$$$': return 'luxury';\n    default: return 'moderate';\n  }\n};\n\n// Fallback restaurant data for when API fails\nconst fallbackRestaurants: Restaurant[] = [\n  {\n    id: 'fallback1',\n    name: 'Local Bistro',\n    description: 'A cozy local bistro serving fresh, seasonal dishes',\n    cuisine: 'American',\n    priceRange: 'moderate',\n    rating: 4.2,\n    reviewCount: 45,\n    address: '123 Main St',\n    city: 'Your City',\n    state: 'CA',\n    zipCode: '12345',\n    phone: '(555) 123-4567',\n    website: '',\n    hours: {},\n    images: ['https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=800'],\n    tags: ['Local', 'American', 'Casual'],\n    coordinates: { latitude: 37.7749, longitude: -122.4194 },\n    distance: 0.5,\n    isOpen: true,\n    deliveryAvailable: true,\n    takeoutAvailable: true,\n    dineInAvailable: true,\n    features: [],\n    dietaryOptions: [],\n    createdAt: new Date(),\n    updatedAt: new Date(),\n  },\n  {\n    id: 'fallback2',\n    name: 'Pizza Palace',\n    description: 'Authentic Italian pizza and pasta made with fresh ingredients',\n    cuisine: 'Italian',\n    priceRange: 'moderate',\n    rating: 4.5,\n    reviewCount: 78,\n    address: '456 Oak Ave',\n    city: 'Your City',\n    state: 'CA',\n    zipCode: '12345',\n    phone: '(555) 987-6543',\n    website: '',\n    hours: {},\n    images: ['https://images.unsplash.com/photo-1513104890138-7c749659a591?w=800'],\n    tags: ['Italian', 'Pizza', 'Pasta'],\n    coordinates: { latitude: 37.7849, longitude: -122.4094 },\n    distance: 1.2,\n    isOpen: true,\n    deliveryAvailable: true,\n    takeoutAvailable: true,\n    dineInAvailable: true,\n    features: [],\n    dietaryOptions: [],\n    createdAt: new Date(),\n    updatedAt: new Date(),\n  },\n  {\n    id: 'fallback3',\n    name: 'Sushi Master',\n    description: 'Premium sushi and sashimi with the freshest fish',\n    cuisine: 'Japanese',\n    priceRange: 'expensive',\n    rating: 4.7,\n    reviewCount: 156,\n    address: '789 Pine St',\n    city: 'Your City',\n    state: 'CA',\n    zipCode: '12345',\n    phone: '(555) 456-7890',\n    website: '',\n    hours: {},\n    images: ['https://images.unsplash.com/photo-1579584425555-c3ce17fd4351?w=800'],\n    tags: ['Japanese', 'Sushi', 'Fine Dining'],\n    coordinates: { latitude: 37.7949, longitude: -122.3994 },\n    distance: 1.8,\n    isOpen: true,\n    deliveryAvailable: false,\n    takeoutAvailable: true,\n    dineInAvailable: true,\n    features: [],\n    dietaryOptions: [],\n    createdAt: new Date(),\n    updatedAt: new Date(),\n  },\n  {\n    id: 'fallback4',\n    name: 'Taco Truck',\n    description: 'Authentic Mexican street food with bold flavors',\n    cuisine: 'Mexican',\n    priceRange: 'budget',\n    rating: 4.3,\n    reviewCount: 92,\n    address: '321 Food Truck Lane',\n    city: 'Your City',\n    state: 'CA',\n    zipCode: '12345',\n    phone: '(555) 321-6540',\n    website: '',\n    hours: {},\n    images: ['https://images.unsplash.com/photo-1565299624946-b28f40a0ca4b?w=800'],\n    tags: ['Mexican', 'Street Food', 'Tacos'],\n    coordinates: { latitude: 37.8049, longitude: -122.3894 },\n    distance: 2.3,\n    isOpen: true,\n    deliveryAvailable: true,\n    takeoutAvailable: true,\n    dineInAvailable: false,\n    features: [],\n    dietaryOptions: [],\n    createdAt: new Date(),\n    updatedAt: new Date(),\n  },\n  {\n    id: 'fallback5',\n    name: 'Burger Joint',\n    description: 'Classic American burgers with hand-cut fries',\n    cuisine: 'American',\n    priceRange: 'moderate',\n    rating: 4.1,\n    reviewCount: 67,\n    address: '654 Burger Blvd',\n    city: 'Your City',\n    state: 'CA',\n    zipCode: '12345',\n    phone: '(555) 654-3210',\n    website: '',\n    hours: {},\n    images: ['https://images.unsplash.com/photo-1565299624946-b28f40a0ca4b?w=800'],\n    tags: ['American', 'Burgers', 'Casual'],\n    coordinates: { latitude: 37.8149, longitude: -122.3794 },\n    distance: 2.8,\n    isOpen: true,\n    deliveryAvailable: true,\n    takeoutAvailable: true,\n    dineInAvailable: true,\n    features: [],\n    dietaryOptions: [],\n    createdAt: new Date(),\n    updatedAt: new Date(),\n  },\n];\n\n// Google Places API\nexport const googlePlacesAPI = {\n  async searchNearby(\n    latitude: number,\n    longitude: number,\n    radius: number = 5000,\n    type: string = 'restaurant'\n  ): Promise<Restaurant[]> {\n    const cacheKey = `google_places_${latitude}_${longitude}_${radius}_${type}`;\n    const cached = getCachedData(cacheKey);\n    if (cached) return cached;\n\n    try {\n      console.log('Fetching restaurants from Google Places API...');\n      console.log('Location:', latitude, longitude);\n      console.log('Radius:', radius);\n      console.log('API Key:', API_CONFIG.GOOGLE_PLACES_API_KEY.substring(0, 10) + '...');\n      \n      let allRestaurants: Restaurant[] = [];\n      let nextPageToken: string | undefined;\n      let pageCount = 0;\n      const maxPages = 3; // Get up to 60 restaurants (20 per page)\n      \n      do {\n        const params: any = {\n          location: `${latitude},${longitude}`,\n          radius: Math.min(radius, 50000), // Max 50km\n          type,\n          key: API_CONFIG.GOOGLE_PLACES_API_KEY,\n          rankby: 'rating', // Sort by rating\n          opennow: true, // Only show open restaurants\n        };\n        \n        if (nextPageToken) {\n          params.pagetoken = nextPageToken;\n        }\n        \n        // Try direct API call first\n        let response;\n        try {\n          console.log(`Making API call for page ${pageCount + 1}...`);\n          const apiUrl = `https://maps.googleapis.com/maps/api/place/nearbysearch/json?${new URLSearchParams(params)}`;\n          console.log('API URL:', apiUrl.replace(API_CONFIG.GOOGLE_PLACES_API_KEY, 'API_KEY_HIDDEN'));\n          \n          response = await axios.get<GooglePlacesResponse>(apiUrl, {\n            timeout: 15000,\n          });\n        } catch (apiError) {\n          console.error('Direct API call failed:', apiError);\n          \n          // If it's a CORS error, try with a different proxy\n          if (axios.isAxiosError(apiError) && (apiError.code === 'ERR_NETWORK' || apiError.message.includes('CORS'))) {\n            console.log('CORS error detected, trying with proxy...');\n            \n            try {\n              // Try a different CORS proxy\n              const proxyUrl = 'https://cors-anywhere.herokuapp.com/';\n              const apiUrl = `https://maps.googleapis.com/maps/api/place/nearbysearch/json?${new URLSearchParams(params)}`;\n              \n              response = await axios.get<GooglePlacesResponse>(`${proxyUrl}${apiUrl}`, {\n                timeout: 20000,\n                headers: {\n                  'Origin': window.location.origin,\n                },\n              });\n            } catch (proxyError) {\n              console.error('Proxy also failed:', proxyError);\n              throw new Error('Both direct API and proxy calls failed');\n            }\n          } else {\n            throw apiError;\n          }\n        }\n\n        console.log(`Page ${pageCount + 1} response status:`, response.data.status);\n        console.log(`Page ${pageCount + 1} results count:`, response.data.results?.length || 0);\n\n        if (response.data.status !== 'OK' && response.data.status !== 'ZERO_RESULTS') {\n          console.error('API Error:', response.data.status, response.data.error_message);\n          throw new Error(`Google Places API error: ${response.data.status} - ${response.data.error_message || 'Unknown error'}`);\n        }\n\n        if (response.data.status === 'ZERO_RESULTS') {\n          console.log('No more restaurants found');\n          break;\n        }\n\n        const restaurants: Restaurant[] = response.data.results.map((place) => ({\n          id: place.place_id,\n          name: place.name,\n          description: place.types?.join(', ') || 'Restaurant',\n          cuisine: place.types?.[0] || 'restaurant',\n          priceRange: convertPriceLevelToRange(place.price_level),\n          rating: place.rating || 0,\n          reviewCount: place.user_ratings_total || 0,\n          address: place.vicinity || place.formatted_address || '',\n          city: place.vicinity?.split(',')[1]?.trim() || '',\n          state: place.vicinity?.split(',')[2]?.trim() || '',\n          zipCode: '',\n          phone: '',\n          website: '',\n          hours: {},\n          images: place.photos ? \n            place.photos.slice(0, 3).map(photo => \n              `https://maps.googleapis.com/maps/api/place/photo?maxwidth=400&photoreference=${photo.photo_reference}&key=${API_CONFIG.GOOGLE_PLACES_API_KEY}`\n            ) : ['https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=800'],\n          tags: place.types || [],\n          coordinates: {\n            latitude: place.geometry.location.lat,\n            longitude: place.geometry.location.lng,\n          },\n          distance: 0, // Will be calculated later\n          isOpen: place.opening_hours?.open_now || false,\n          deliveryAvailable: false,\n          takeoutAvailable: false,\n          dineInAvailable: true,\n          features: [],\n          dietaryOptions: [],\n          createdAt: new Date(),\n          updatedAt: new Date(),\n        }));\n\n        allRestaurants.push(...restaurants);\n        nextPageToken = response.data.next_page_token;\n        pageCount++;\n        \n        // Wait 2 seconds before requesting next page (Google API requirement)\n        if (nextPageToken && pageCount < maxPages) {\n          console.log('Waiting 2 seconds before next page...');\n          await new Promise(resolve => setTimeout(resolve, 2000));\n        }\n        \n      } while (nextPageToken && pageCount < maxPages);\n\n      // Calculate distances\n      allRestaurants.forEach(restaurant => {\n        const lat1 = latitude;\n        const lon1 = longitude;\n        const lat2 = restaurant.coordinates.latitude;\n        const lon2 = restaurant.coordinates.longitude;\n        \n        // Haversine formula to calculate distance\n        const R = 3959; // Earth's radius in miles\n        const dLat = (lat2 - lat1) * Math.PI / 180;\n        const dLon = (lon2 - lon1) * Math.PI / 180;\n        const a = Math.sin(dLat/2) * Math.sin(dLat/2) +\n                  Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *\n                  Math.sin(dLon/2) * Math.sin(dLon/2);\n        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n        restaurant.distance = R * c;\n      });\n\n      // Sort by distance\n      allRestaurants.sort((a, b) => (a.distance || 0) - (b.distance || 0));\n\n      console.log(`Found ${allRestaurants.length} restaurants total`);\n      \n      if (allRestaurants.length === 0) {\n        console.log('No restaurants found, using fallback data');\n        return fallbackRestaurants.map(restaurant => ({\n          ...restaurant,\n          coordinates: { latitude, longitude },\n          distance: Math.random() * 2 + 0.1,\n        }));\n      }\n      \n      setCachedData(cacheKey, allRestaurants);\n      return allRestaurants;\n      \n    } catch (error) {\n      console.error('Google Places API error:', error);\n      \n      // Return fallback data if API fails\n      if (axios.isAxiosError(error)) {\n        console.error('Axios error details:', error.response?.data);\n        \n        // Check if it's a CORS error or API key issue\n        if (error.code === 'ERR_NETWORK' || error.message.includes('CORS')) {\n          console.log('Network/CORS error detected, using fallback data');\n        } else if (error.response?.data?.status === 'REQUEST_DENIED') {\n          console.log('API key denied, using fallback data');\n        } else {\n          console.log('Other API error, using fallback data');\n        }\n        \n        return fallbackRestaurants.map(restaurant => ({\n          ...restaurant,\n          coordinates: { latitude, longitude },\n          distance: Math.random() * 2 + 0.1,\n        }));\n      }\n      \n      throw new Error(`Failed to fetch restaurants: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  },\n\n  async getPlaceDetails(placeId: string): Promise<Restaurant> {\n    const cacheKey = `google_place_details_${placeId}`;\n    const cached = getCachedData(cacheKey);\n    if (cached) return cached;\n\n    try {\n      const response = await axios.get(\n        'https://maps.googleapis.com/maps/api/place/details/json',\n        {\n          params: {\n            place_id: placeId,\n            fields: 'name,formatted_address,formatted_phone_number,website,opening_hours,rating,user_ratings_total,photos,types,price_level,geometry',\n            key: API_CONFIG.GOOGLE_PLACES_API_KEY,\n          },\n          timeout: 10000,\n        }\n      );\n\n      if (response.data.status !== 'OK') {\n        throw new Error(`Google Places Details API error: ${response.data.status}`);\n      }\n\n      const place = response.data.result;\n      const restaurant: Restaurant = {\n        id: placeId,\n        name: place.name,\n        description: place.types?.join(', ') || '',\n        cuisine: place.types?.[0] || 'restaurant',\n        priceRange: convertPriceLevelToRange(place.price_level),\n        rating: place.rating || 0,\n        reviewCount: place.user_ratings_total || 0,\n        address: place.formatted_address,\n        city: place.formatted_address.split(',')[1]?.trim() || '',\n        state: place.formatted_address.split(',')[2]?.trim() || '',\n        zipCode: place.formatted_address.split(',')[3]?.trim() || '',\n        phone: place.formatted_phone_number || '',\n        website: place.website || '',\n        hours: place.opening_hours?.weekday_text?.reduce((acc: any, day: string) => {\n          const [dayName, hours] = day.split(': ');\n          acc[dayName] = hours;\n          return acc;\n        }, {}) || {},\n        images: place.photos ? \n          place.photos.slice(0, 5).map((photo: any) => \n            `https://maps.googleapis.com/maps/api/place/photo?maxwidth=400&photoreference=${photo.photo_reference}&key=${API_CONFIG.GOOGLE_PLACES_API_KEY}`\n          ) : ['https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=800'],\n        tags: place.types || [],\n        coordinates: place.geometry?.location ? {\n          latitude: place.geometry.location.lat,\n          longitude: place.geometry.location.lng,\n        } : { latitude: 0, longitude: 0 },\n        isOpen: place.opening_hours?.open_now || false,\n        deliveryAvailable: false,\n        takeoutAvailable: false,\n        dineInAvailable: true,\n        features: [],\n        dietaryOptions: [],\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n\n      setCachedData(cacheKey, restaurant);\n      return restaurant;\n    } catch (error) {\n      console.error('Google Places Details API error:', error);\n      throw error;\n    }\n  },\n\n  async getPlaceReviews(placeId: string): Promise<any[]> {\n    const cacheKey = `google_place_reviews_${placeId}`;\n    const cached = getCachedData(cacheKey);\n    if (cached) return cached;\n\n    try {\n      const response = await axios.get(\n        'https://maps.googleapis.com/maps/api/place/details/json',\n        {\n          params: {\n            place_id: placeId,\n            fields: 'reviews',\n            key: API_CONFIG.GOOGLE_PLACES_API_KEY,\n          },\n          timeout: 10000,\n        }\n      );\n\n      if (response.data.status !== 'OK') {\n        throw new Error(`Google Places Reviews API error: ${response.data.status}`);\n      }\n\n      const reviews = response.data.result.reviews || [];\n      setCachedData(cacheKey, reviews);\n      return reviews;\n    } catch (error) {\n      console.error('Google Places Reviews API error:', error);\n      return []; // Return empty array instead of throwing\n    }\n  },\n};\n\n// Yelp API\nexport const yelpAPI = {\n  async searchBusinesses(\n    latitude: number,\n    longitude: number,\n    radius: number = 5000,\n    limit: number = 20\n  ): Promise<Restaurant[]> {\n    const cacheKey = `yelp_${latitude}_${longitude}_${radius}_${limit}`;\n    const cached = getCachedData(cacheKey);\n    if (cached) return cached;\n\n    try {\n      const response = await axios.get<YelpResponse>(\n        'https://api.yelp.com/v3/businesses/search',\n        {\n          headers: {\n            Authorization: `Bearer ${API_CONFIG.YELP_API_KEY}`,\n          },\n          params: {\n            latitude,\n            longitude,\n            radius,\n            limit,\n            categories: 'restaurants',\n            sort_by: 'rating',\n          },\n        }\n      );\n\n      const restaurants: Restaurant[] = response.data.businesses.map((business) => ({\n        id: business.id,\n        name: business.name,\n        description: business.categories.map(cat => cat.title).join(', '),\n        cuisine: business.categories[0]?.title || 'restaurant',\n        priceRange: convertYelpPriceToRange(business.price),\n        rating: business.rating,\n        reviewCount: business.review_count,\n        address: business.location.address1,\n        city: business.location.city,\n        state: business.location.state,\n        zipCode: business.location.zip_code,\n        phone: business.phone,\n        website: business.url,\n        hours: {},\n        images: [business.image_url],\n        tags: business.categories.map(cat => cat.title),\n        coordinates: {\n          latitude: business.coordinates.latitude,\n          longitude: business.coordinates.longitude,\n        },\n        distance: business.distance / 1609.34, // Convert meters to miles\n        isOpen: true, // Yelp doesn't provide real-time open status\n        deliveryAvailable: business.transactions.includes('delivery'),\n        takeoutAvailable: business.transactions.includes('pickup'),\n        dineInAvailable: business.transactions.includes('restaurant_reservation'),\n        features: business.transactions,\n        dietaryOptions: [],\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      }));\n\n      setCachedData(cacheKey, restaurants);\n      return restaurants;\n    } catch (error) {\n      console.error('Yelp API error:', error);\n      throw error;\n    }\n  },\n};\n\n// AI Recommendations API\nexport const aiAPI = {\n  async getRecommendations(request: AIRecommendationRequest): Promise<AIRecommendationResponse> {\n    try {\n      const response = await axios.post<AIRecommendationResponse>(\n        `${API_CONFIG.AI_API_ENDPOINT}/recommendations`,\n        request,\n        {\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        }\n      );\n\n      return response.data;\n    } catch (error) {\n      console.error('AI Recommendations API error:', error);\n      throw error;\n    }\n  },\n\n  async analyzeUserPreferences(userId: string, ratings: any[]): Promise<any> {\n    try {\n      const response = await axios.post(\n        `${API_CONFIG.AI_API_ENDPOINT}/analyze-preferences`,\n        { userId, ratings },\n        {\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        }\n      );\n\n      return response.data;\n    } catch (error) {\n      console.error('AI Analysis API error:', error);\n      throw error;\n    }\n  },\n};\n\n// Firebase integration for user data\nexport const firebaseAPI = {\n  async saveUserRating(rating: any): Promise<void> {\n    // This would integrate with Firebase Firestore\n    console.log('Saving rating to Firebase:', rating);\n  },\n\n  async getUserRatings(userId: string): Promise<any[]> {\n    // This would fetch from Firebase Firestore\n    console.log('Fetching ratings from Firebase for user:', userId);\n    return [];\n  },\n\n  async updateUserPreferences(userId: string, preferences: any): Promise<void> {\n    // This would update Firebase Firestore\n    console.log('Updating preferences in Firebase for user:', userId, preferences);\n  },\n};\n\n// Combined API service\nexport const apiService = {\n  async getNearbyRestaurants(\n    latitude: number,\n    longitude: number,\n    radius: number = 5000\n  ): Promise<Restaurant[]> {\n    try {\n      // Try Google Places first, fallback to Yelp\n      const googleResults = await googlePlacesAPI.searchNearby(latitude, longitude, radius);\n      if (googleResults.length > 0) {\n        return googleResults;\n      }\n\n      const yelpResults = await yelpAPI.searchBusinesses(latitude, longitude, radius);\n      return yelpResults;\n    } catch (error) {\n      console.error('Error fetching nearby restaurants:', error);\n      throw error;\n    }\n  },\n\n  async getAIRecommendations(\n    userId: string,\n    userPreferences: any,\n    recentRatings: any[],\n    location: { latitude: number; longitude: number }\n  ): Promise<Restaurant[]> {\n    try {\n      const recommendations = await aiAPI.getRecommendations({\n        userId,\n        userPreferences,\n        recentRatings,\n        location,\n        limit: 10,\n      });\n\n      // Fetch full restaurant details for recommended IDs\n      const restaurants: Restaurant[] = await Promise.all(\n        recommendations.recommendations.map(async (rec) => {\n          try {\n            return await googlePlacesAPI.getPlaceDetails(rec.restaurantId);\n          } catch {\n            // Fallback to basic restaurant data\n            return {\n              id: rec.restaurantId,\n              name: 'Recommended Restaurant',\n              description: rec.reasoning,\n              cuisine: 'restaurant',\n              priceRange: 'moderate' as const,\n              rating: 0,\n              reviewCount: 0,\n              address: '',\n              city: '',\n              state: '',\n              zipCode: '',\n              phone: '',\n              hours: {},\n              images: [],\n              tags: rec.matchFactors,\n              coordinates: location,\n              isOpen: false,\n              deliveryAvailable: false,\n              takeoutAvailable: false,\n              dineInAvailable: true,\n              features: [],\n              dietaryOptions: [],\n              createdAt: new Date(),\n              updatedAt: new Date(),\n            };\n          }\n        })\n      );\n\n      return restaurants;\n    } catch (error) {\n      console.error('Error getting AI recommendations:', error);\n      throw error;\n    }\n  },\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}