{"ast":null,"code":"import axios from 'axios';\n// API Configuration\nconst API_CONFIG = {\n  GOOGLE_PLACES_API_KEY: 'AIzaSyDjtvrqfAfoBvmU6JjH7v1wZek0SLP-40o',\n  YELP_API_KEY: process.env.REACT_APP_YELP_API_KEY,\n  AI_API_ENDPOINT: process.env.REACT_APP_AI_API_ENDPOINT,\n  FIREBASE_CONFIG: {\n    apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n    authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n    projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n    appId: process.env.REACT_APP_FIREBASE_APP_ID\n  }\n};\n\n// Cache for API responses\nconst cache = new Map();\nconst CACHE_DURATION = 5 * 60 * 1000; // 5 minutes\n\n// Helper function to get cached data\nconst getCachedData = key => {\n  const cached = cache.get(key);\n  if (cached && Date.now() - cached.timestamp < CACHE_DURATION) {\n    return cached.data;\n  }\n  return null;\n};\n\n// Helper function to set cached data\nconst setCachedData = (key, data) => {\n  cache.set(key, {\n    data,\n    timestamp: Date.now()\n  });\n};\n\n// Helper function to convert price level to price range\nconst convertPriceLevelToRange = priceLevel => {\n  if (!priceLevel) return 'moderate';\n  switch (priceLevel) {\n    case 1:\n      return 'budget';\n    case 2:\n      return 'moderate';\n    case 3:\n      return 'expensive';\n    case 4:\n      return 'luxury';\n    default:\n      return 'moderate';\n  }\n};\n\n// Helper function to convert Yelp price to price range\nconst convertYelpPriceToRange = price => {\n  if (!price) return 'moderate';\n  switch (price) {\n    case '$':\n      return 'budget';\n    case '$$':\n      return 'moderate';\n    case '$$$':\n      return 'expensive';\n    case '$$$$':\n      return 'luxury';\n    default:\n      return 'moderate';\n  }\n};\n\n// Google Places API\nexport const googlePlacesAPI = {\n  async searchNearby(latitude, longitude, radius = 5000, type = 'restaurant') {\n    const cacheKey = `google_places_${latitude}_${longitude}_${radius}_${type}`;\n    const cached = getCachedData(cacheKey);\n    if (cached) return cached;\n    try {\n      const response = await axios.get('https://maps.googleapis.com/maps/api/place/nearbysearch/json', {\n        params: {\n          location: `${latitude},${longitude}`,\n          radius,\n          type,\n          key: API_CONFIG.GOOGLE_PLACES_API_KEY\n        }\n      });\n      if (response.data.status !== 'OK') {\n        throw new Error(`Google Places API error: ${response.data.status}`);\n      }\n      const restaurants = response.data.results.map(place => {\n        var _place$formatted_addr, _place$formatted_addr2, _place$formatted_addr3, _place$opening_hours;\n        return {\n          id: place.place_id,\n          name: place.name,\n          description: place.types.join(', '),\n          cuisine: place.types[0] || 'restaurant',\n          priceRange: convertPriceLevelToRange(place.price_level),\n          rating: place.rating || 0,\n          reviewCount: place.user_ratings_total || 0,\n          address: place.formatted_address,\n          city: ((_place$formatted_addr = place.formatted_address.split(',')[1]) === null || _place$formatted_addr === void 0 ? void 0 : _place$formatted_addr.trim()) || '',\n          state: ((_place$formatted_addr2 = place.formatted_address.split(',')[2]) === null || _place$formatted_addr2 === void 0 ? void 0 : _place$formatted_addr2.trim()) || '',\n          zipCode: ((_place$formatted_addr3 = place.formatted_address.split(',')[3]) === null || _place$formatted_addr3 === void 0 ? void 0 : _place$formatted_addr3.trim()) || '',\n          phone: '',\n          website: '',\n          hours: {},\n          images: place.photos ? place.photos.slice(0, 3).map(photo => `https://maps.googleapis.com/maps/api/place/photo?maxwidth=400&photoreference=${photo.photo_reference}&key=${API_CONFIG.GOOGLE_PLACES_API_KEY}`) : [],\n          tags: place.types,\n          coordinates: {\n            latitude: place.geometry.location.lat,\n            longitude: place.geometry.location.lng\n          },\n          isOpen: ((_place$opening_hours = place.opening_hours) === null || _place$opening_hours === void 0 ? void 0 : _place$opening_hours.open_now) || false,\n          deliveryAvailable: false,\n          takeoutAvailable: false,\n          dineInAvailable: true,\n          features: [],\n          dietaryOptions: [],\n          createdAt: new Date(),\n          updatedAt: new Date()\n        };\n      });\n      setCachedData(cacheKey, restaurants);\n      return restaurants;\n    } catch (error) {\n      console.error('Google Places API error:', error);\n      throw error;\n    }\n  },\n  async getPlaceDetails(placeId) {\n    const cacheKey = `google_place_details_${placeId}`;\n    const cached = getCachedData(cacheKey);\n    if (cached) return cached;\n    try {\n      var _place$types, _place$types2, _place$formatted_addr4, _place$formatted_addr5, _place$formatted_addr6, _place$opening_hours2, _place$opening_hours3, _place$opening_hours4;\n      const response = await axios.get('https://maps.googleapis.com/maps/api/place/details/json', {\n        params: {\n          place_id: placeId,\n          fields: 'name,formatted_address,formatted_phone_number,website,opening_hours,rating,user_ratings_total,photos,types,price_level',\n          key: API_CONFIG.GOOGLE_PLACES_API_KEY\n        }\n      });\n      if (response.data.status !== 'OK') {\n        throw new Error(`Google Places Details API error: ${response.data.status}`);\n      }\n      const place = response.data.result;\n      const restaurant = {\n        id: placeId,\n        name: place.name,\n        description: ((_place$types = place.types) === null || _place$types === void 0 ? void 0 : _place$types.join(', ')) || '',\n        cuisine: ((_place$types2 = place.types) === null || _place$types2 === void 0 ? void 0 : _place$types2[0]) || 'restaurant',\n        priceRange: convertPriceLevelToRange(place.price_level),\n        rating: place.rating || 0,\n        reviewCount: place.user_ratings_total || 0,\n        address: place.formatted_address,\n        city: ((_place$formatted_addr4 = place.formatted_address.split(',')[1]) === null || _place$formatted_addr4 === void 0 ? void 0 : _place$formatted_addr4.trim()) || '',\n        state: ((_place$formatted_addr5 = place.formatted_address.split(',')[2]) === null || _place$formatted_addr5 === void 0 ? void 0 : _place$formatted_addr5.trim()) || '',\n        zipCode: ((_place$formatted_addr6 = place.formatted_address.split(',')[3]) === null || _place$formatted_addr6 === void 0 ? void 0 : _place$formatted_addr6.trim()) || '',\n        phone: place.formatted_phone_number || '',\n        website: place.website || '',\n        hours: ((_place$opening_hours2 = place.opening_hours) === null || _place$opening_hours2 === void 0 ? void 0 : (_place$opening_hours3 = _place$opening_hours2.weekday_text) === null || _place$opening_hours3 === void 0 ? void 0 : _place$opening_hours3.reduce((acc, day) => {\n          const [dayName, hours] = day.split(': ');\n          acc[dayName] = hours;\n          return acc;\n        }, {})) || {},\n        images: place.photos ? place.photos.slice(0, 5).map(photo => `https://maps.googleapis.com/maps/api/place/photo?maxwidth=400&photoreference=${photo.photo_reference}&key=${API_CONFIG.GOOGLE_PLACES_API_KEY}`) : [],\n        tags: place.types || [],\n        coordinates: {\n          latitude: 0,\n          longitude: 0\n        },\n        // Would need to get from geometry\n        isOpen: ((_place$opening_hours4 = place.opening_hours) === null || _place$opening_hours4 === void 0 ? void 0 : _place$opening_hours4.open_now) || false,\n        deliveryAvailable: false,\n        takeoutAvailable: false,\n        dineInAvailable: true,\n        features: [],\n        dietaryOptions: [],\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n      setCachedData(cacheKey, restaurant);\n      return restaurant;\n    } catch (error) {\n      console.error('Google Places Details API error:', error);\n      throw error;\n    }\n  },\n  async getPlaceReviews(placeId) {\n    const cacheKey = `google_place_reviews_${placeId}`;\n    const cached = getCachedData(cacheKey);\n    if (cached) return cached;\n    try {\n      const response = await axios.get('https://maps.googleapis.com/maps/api/place/details/json', {\n        params: {\n          place_id: placeId,\n          fields: 'reviews',\n          key: API_CONFIG.GOOGLE_PLACES_API_KEY\n        }\n      });\n      if (response.data.status !== 'OK') {\n        throw new Error(`Google Places Reviews API error: ${response.data.status}`);\n      }\n      const reviews = response.data.result.reviews || [];\n      setCachedData(cacheKey, reviews);\n      return reviews;\n    } catch (error) {\n      console.error('Google Places Reviews API error:', error);\n      throw error;\n    }\n  }\n};\n\n// Yelp API\nexport const yelpAPI = {\n  async searchBusinesses(latitude, longitude, radius = 5000, limit = 20) {\n    const cacheKey = `yelp_${latitude}_${longitude}_${radius}_${limit}`;\n    const cached = getCachedData(cacheKey);\n    if (cached) return cached;\n    try {\n      const response = await axios.get('https://api.yelp.com/v3/businesses/search', {\n        headers: {\n          Authorization: `Bearer ${API_CONFIG.YELP_API_KEY}`\n        },\n        params: {\n          latitude,\n          longitude,\n          radius,\n          limit,\n          categories: 'restaurants',\n          sort_by: 'rating'\n        }\n      });\n      const restaurants = response.data.businesses.map(business => {\n        var _business$categories$;\n        return {\n          id: business.id,\n          name: business.name,\n          description: business.categories.map(cat => cat.title).join(', '),\n          cuisine: ((_business$categories$ = business.categories[0]) === null || _business$categories$ === void 0 ? void 0 : _business$categories$.title) || 'restaurant',\n          priceRange: convertYelpPriceToRange(business.price),\n          rating: business.rating,\n          reviewCount: business.review_count,\n          address: business.location.address1,\n          city: business.location.city,\n          state: business.location.state,\n          zipCode: business.location.zip_code,\n          phone: business.phone,\n          website: business.url,\n          hours: {},\n          images: [business.image_url],\n          tags: business.categories.map(cat => cat.title),\n          coordinates: {\n            latitude: business.coordinates.latitude,\n            longitude: business.coordinates.longitude\n          },\n          distance: business.distance / 1609.34,\n          // Convert meters to miles\n          isOpen: true,\n          // Yelp doesn't provide real-time open status\n          deliveryAvailable: business.transactions.includes('delivery'),\n          takeoutAvailable: business.transactions.includes('pickup'),\n          dineInAvailable: business.transactions.includes('restaurant_reservation'),\n          features: business.transactions,\n          dietaryOptions: [],\n          createdAt: new Date(),\n          updatedAt: new Date()\n        };\n      });\n      setCachedData(cacheKey, restaurants);\n      return restaurants;\n    } catch (error) {\n      console.error('Yelp API error:', error);\n      throw error;\n    }\n  }\n};\n\n// AI Recommendations API\nexport const aiAPI = {\n  async getRecommendations(request) {\n    try {\n      const response = await axios.post(`${API_CONFIG.AI_API_ENDPOINT}/recommendations`, request, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('AI Recommendations API error:', error);\n      throw error;\n    }\n  },\n  async analyzeUserPreferences(userId, ratings) {\n    try {\n      const response = await axios.post(`${API_CONFIG.AI_API_ENDPOINT}/analyze-preferences`, {\n        userId,\n        ratings\n      }, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('AI Analysis API error:', error);\n      throw error;\n    }\n  }\n};\n\n// Firebase integration for user data\nexport const firebaseAPI = {\n  async saveUserRating(rating) {\n    // This would integrate with Firebase Firestore\n    console.log('Saving rating to Firebase:', rating);\n  },\n  async getUserRatings(userId) {\n    // This would fetch from Firebase Firestore\n    console.log('Fetching ratings from Firebase for user:', userId);\n    return [];\n  },\n  async updateUserPreferences(userId, preferences) {\n    // This would update Firebase Firestore\n    console.log('Updating preferences in Firebase for user:', userId, preferences);\n  }\n};\n\n// Combined API service\nexport const apiService = {\n  async getNearbyRestaurants(latitude, longitude, radius = 5000) {\n    try {\n      // Try Google Places first, fallback to Yelp\n      const googleResults = await googlePlacesAPI.searchNearby(latitude, longitude, radius);\n      if (googleResults.length > 0) {\n        return googleResults;\n      }\n      const yelpResults = await yelpAPI.searchBusinesses(latitude, longitude, radius);\n      return yelpResults;\n    } catch (error) {\n      console.error('Error fetching nearby restaurants:', error);\n      throw error;\n    }\n  },\n  async getAIRecommendations(userId, userPreferences, recentRatings, location) {\n    try {\n      const recommendations = await aiAPI.getRecommendations({\n        userId,\n        userPreferences,\n        recentRatings,\n        location,\n        limit: 10\n      });\n\n      // Fetch full restaurant details for recommended IDs\n      const restaurants = await Promise.all(recommendations.recommendations.map(async rec => {\n        try {\n          return await googlePlacesAPI.getPlaceDetails(rec.restaurantId);\n        } catch {\n          // Fallback to basic restaurant data\n          return {\n            id: rec.restaurantId,\n            name: 'Recommended Restaurant',\n            description: rec.reasoning,\n            cuisine: 'restaurant',\n            priceRange: 'moderate',\n            rating: 0,\n            reviewCount: 0,\n            address: '',\n            city: '',\n            state: '',\n            zipCode: '',\n            phone: '',\n            hours: {},\n            images: [],\n            tags: rec.matchFactors,\n            coordinates: location,\n            isOpen: false,\n            deliveryAvailable: false,\n            takeoutAvailable: false,\n            dineInAvailable: true,\n            features: [],\n            dietaryOptions: [],\n            createdAt: new Date(),\n            updatedAt: new Date()\n          };\n        }\n      }));\n      return restaurants;\n    } catch (error) {\n      console.error('Error getting AI recommendations:', error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["axios","API_CONFIG","GOOGLE_PLACES_API_KEY","YELP_API_KEY","process","env","REACT_APP_YELP_API_KEY","AI_API_ENDPOINT","REACT_APP_AI_API_ENDPOINT","FIREBASE_CONFIG","apiKey","REACT_APP_FIREBASE_API_KEY","authDomain","REACT_APP_FIREBASE_AUTH_DOMAIN","projectId","REACT_APP_FIREBASE_PROJECT_ID","storageBucket","REACT_APP_FIREBASE_STORAGE_BUCKET","messagingSenderId","REACT_APP_FIREBASE_MESSAGING_SENDER_ID","appId","REACT_APP_FIREBASE_APP_ID","cache","Map","CACHE_DURATION","getCachedData","key","cached","get","Date","now","timestamp","data","setCachedData","set","convertPriceLevelToRange","priceLevel","convertYelpPriceToRange","price","googlePlacesAPI","searchNearby","latitude","longitude","radius","type","cacheKey","response","params","location","status","Error","restaurants","results","map","place","_place$formatted_addr","_place$formatted_addr2","_place$formatted_addr3","_place$opening_hours","id","place_id","name","description","types","join","cuisine","priceRange","price_level","rating","reviewCount","user_ratings_total","address","formatted_address","city","split","trim","state","zipCode","phone","website","hours","images","photos","slice","photo","photo_reference","tags","coordinates","geometry","lat","lng","isOpen","opening_hours","open_now","deliveryAvailable","takeoutAvailable","dineInAvailable","features","dietaryOptions","createdAt","updatedAt","error","console","getPlaceDetails","placeId","_place$types","_place$types2","_place$formatted_addr4","_place$formatted_addr5","_place$formatted_addr6","_place$opening_hours2","_place$opening_hours3","_place$opening_hours4","fields","result","restaurant","formatted_phone_number","weekday_text","reduce","acc","day","dayName","getPlaceReviews","reviews","yelpAPI","searchBusinesses","limit","headers","Authorization","categories","sort_by","businesses","business","_business$categories$","cat","title","review_count","address1","zip_code","url","image_url","distance","transactions","includes","aiAPI","getRecommendations","request","post","analyzeUserPreferences","userId","ratings","firebaseAPI","saveUserRating","log","getUserRatings","updateUserPreferences","preferences","apiService","getNearbyRestaurants","googleResults","length","yelpResults","getAIRecommendations","userPreferences","recentRatings","recommendations","Promise","all","rec","restaurantId","reasoning","matchFactors"],"sources":["/Users/andrewnguyen/scrollEats/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\nimport { Restaurant, GooglePlacesResponse, YelpResponse, AIRecommendationRequest, AIRecommendationResponse } from '../types';\n\n// API Configuration\nconst API_CONFIG = {\n  GOOGLE_PLACES_API_KEY: 'AIzaSyDjtvrqfAfoBvmU6JjH7v1wZek0SLP-40o',\n  YELP_API_KEY: process.env.REACT_APP_YELP_API_KEY,\n  AI_API_ENDPOINT: process.env.REACT_APP_AI_API_ENDPOINT,\n  FIREBASE_CONFIG: {\n    apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n    authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n    projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n    appId: process.env.REACT_APP_FIREBASE_APP_ID,\n  },\n};\n\n// Cache for API responses\nconst cache = new Map<string, { data: any; timestamp: number }>();\nconst CACHE_DURATION = 5 * 60 * 1000; // 5 minutes\n\n// Helper function to get cached data\nconst getCachedData = (key: string) => {\n  const cached = cache.get(key);\n  if (cached && Date.now() - cached.timestamp < CACHE_DURATION) {\n    return cached.data;\n  }\n  return null;\n};\n\n// Helper function to set cached data\nconst setCachedData = (key: string, data: any) => {\n  cache.set(key, { data, timestamp: Date.now() });\n};\n\n// Helper function to convert price level to price range\nconst convertPriceLevelToRange = (priceLevel?: number): Restaurant['priceRange'] => {\n  if (!priceLevel) return 'moderate';\n  switch (priceLevel) {\n    case 1: return 'budget';\n    case 2: return 'moderate';\n    case 3: return 'expensive';\n    case 4: return 'luxury';\n    default: return 'moderate';\n  }\n};\n\n// Helper function to convert Yelp price to price range\nconst convertYelpPriceToRange = (price?: string): Restaurant['priceRange'] => {\n  if (!price) return 'moderate';\n  switch (price) {\n    case '$': return 'budget';\n    case '$$': return 'moderate';\n    case '$$$': return 'expensive';\n    case '$$$$': return 'luxury';\n    default: return 'moderate';\n  }\n};\n\n// Google Places API\nexport const googlePlacesAPI = {\n  async searchNearby(\n    latitude: number,\n    longitude: number,\n    radius: number = 5000,\n    type: string = 'restaurant'\n  ): Promise<Restaurant[]> {\n    const cacheKey = `google_places_${latitude}_${longitude}_${radius}_${type}`;\n    const cached = getCachedData(cacheKey);\n    if (cached) return cached;\n\n    try {\n      const response = await axios.get<GooglePlacesResponse>(\n        'https://maps.googleapis.com/maps/api/place/nearbysearch/json',\n        {\n          params: {\n            location: `${latitude},${longitude}`,\n            radius,\n            type,\n            key: API_CONFIG.GOOGLE_PLACES_API_KEY,\n          },\n        }\n      );\n\n      if (response.data.status !== 'OK') {\n        throw new Error(`Google Places API error: ${response.data.status}`);\n      }\n\n      const restaurants: Restaurant[] = response.data.results.map((place) => ({\n        id: place.place_id,\n        name: place.name,\n        description: place.types.join(', '),\n        cuisine: place.types[0] || 'restaurant',\n        priceRange: convertPriceLevelToRange(place.price_level),\n        rating: place.rating || 0,\n        reviewCount: place.user_ratings_total || 0,\n        address: place.formatted_address,\n        city: place.formatted_address.split(',')[1]?.trim() || '',\n        state: place.formatted_address.split(',')[2]?.trim() || '',\n        zipCode: place.formatted_address.split(',')[3]?.trim() || '',\n        phone: '',\n        website: '',\n        hours: {},\n        images: place.photos ? \n          place.photos.slice(0, 3).map(photo => \n            `https://maps.googleapis.com/maps/api/place/photo?maxwidth=400&photoreference=${photo.photo_reference}&key=${API_CONFIG.GOOGLE_PLACES_API_KEY}`\n          ) : [],\n        tags: place.types,\n        coordinates: {\n          latitude: place.geometry.location.lat,\n          longitude: place.geometry.location.lng,\n        },\n        isOpen: place.opening_hours?.open_now || false,\n        deliveryAvailable: false,\n        takeoutAvailable: false,\n        dineInAvailable: true,\n        features: [],\n        dietaryOptions: [],\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      }));\n\n      setCachedData(cacheKey, restaurants);\n      return restaurants;\n    } catch (error) {\n      console.error('Google Places API error:', error);\n      throw error;\n    }\n  },\n\n  async getPlaceDetails(placeId: string): Promise<Restaurant> {\n    const cacheKey = `google_place_details_${placeId}`;\n    const cached = getCachedData(cacheKey);\n    if (cached) return cached;\n\n    try {\n      const response = await axios.get(\n        'https://maps.googleapis.com/maps/api/place/details/json',\n        {\n          params: {\n            place_id: placeId,\n            fields: 'name,formatted_address,formatted_phone_number,website,opening_hours,rating,user_ratings_total,photos,types,price_level',\n            key: API_CONFIG.GOOGLE_PLACES_API_KEY,\n          },\n        }\n      );\n\n      if (response.data.status !== 'OK') {\n        throw new Error(`Google Places Details API error: ${response.data.status}`);\n      }\n\n      const place = response.data.result;\n      const restaurant: Restaurant = {\n        id: placeId,\n        name: place.name,\n        description: place.types?.join(', ') || '',\n        cuisine: place.types?.[0] || 'restaurant',\n        priceRange: convertPriceLevelToRange(place.price_level),\n        rating: place.rating || 0,\n        reviewCount: place.user_ratings_total || 0,\n        address: place.formatted_address,\n        city: place.formatted_address.split(',')[1]?.trim() || '',\n        state: place.formatted_address.split(',')[2]?.trim() || '',\n        zipCode: place.formatted_address.split(',')[3]?.trim() || '',\n        phone: place.formatted_phone_number || '',\n        website: place.website || '',\n        hours: place.opening_hours?.weekday_text?.reduce((acc: any, day: string) => {\n          const [dayName, hours] = day.split(': ');\n          acc[dayName] = hours;\n          return acc;\n        }, {}) || {},\n        images: place.photos ? \n          place.photos.slice(0, 5).map((photo: any) => \n            `https://maps.googleapis.com/maps/api/place/photo?maxwidth=400&photoreference=${photo.photo_reference}&key=${API_CONFIG.GOOGLE_PLACES_API_KEY}`\n          ) : [],\n        tags: place.types || [],\n        coordinates: { latitude: 0, longitude: 0 }, // Would need to get from geometry\n        isOpen: place.opening_hours?.open_now || false,\n        deliveryAvailable: false,\n        takeoutAvailable: false,\n        dineInAvailable: true,\n        features: [],\n        dietaryOptions: [],\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n\n      setCachedData(cacheKey, restaurant);\n      return restaurant;\n    } catch (error) {\n      console.error('Google Places Details API error:', error);\n      throw error;\n    }\n  },\n\n  async getPlaceReviews(placeId: string): Promise<any[]> {\n    const cacheKey = `google_place_reviews_${placeId}`;\n    const cached = getCachedData(cacheKey);\n    if (cached) return cached;\n\n    try {\n      const response = await axios.get(\n        'https://maps.googleapis.com/maps/api/place/details/json',\n        {\n          params: {\n            place_id: placeId,\n            fields: 'reviews',\n            key: API_CONFIG.GOOGLE_PLACES_API_KEY,\n          },\n        }\n      );\n\n      if (response.data.status !== 'OK') {\n        throw new Error(`Google Places Reviews API error: ${response.data.status}`);\n      }\n\n      const reviews = response.data.result.reviews || [];\n      setCachedData(cacheKey, reviews);\n      return reviews;\n    } catch (error) {\n      console.error('Google Places Reviews API error:', error);\n      throw error;\n    }\n  },\n};\n\n// Yelp API\nexport const yelpAPI = {\n  async searchBusinesses(\n    latitude: number,\n    longitude: number,\n    radius: number = 5000,\n    limit: number = 20\n  ): Promise<Restaurant[]> {\n    const cacheKey = `yelp_${latitude}_${longitude}_${radius}_${limit}`;\n    const cached = getCachedData(cacheKey);\n    if (cached) return cached;\n\n    try {\n      const response = await axios.get<YelpResponse>(\n        'https://api.yelp.com/v3/businesses/search',\n        {\n          headers: {\n            Authorization: `Bearer ${API_CONFIG.YELP_API_KEY}`,\n          },\n          params: {\n            latitude,\n            longitude,\n            radius,\n            limit,\n            categories: 'restaurants',\n            sort_by: 'rating',\n          },\n        }\n      );\n\n      const restaurants: Restaurant[] = response.data.businesses.map((business) => ({\n        id: business.id,\n        name: business.name,\n        description: business.categories.map(cat => cat.title).join(', '),\n        cuisine: business.categories[0]?.title || 'restaurant',\n        priceRange: convertYelpPriceToRange(business.price),\n        rating: business.rating,\n        reviewCount: business.review_count,\n        address: business.location.address1,\n        city: business.location.city,\n        state: business.location.state,\n        zipCode: business.location.zip_code,\n        phone: business.phone,\n        website: business.url,\n        hours: {},\n        images: [business.image_url],\n        tags: business.categories.map(cat => cat.title),\n        coordinates: {\n          latitude: business.coordinates.latitude,\n          longitude: business.coordinates.longitude,\n        },\n        distance: business.distance / 1609.34, // Convert meters to miles\n        isOpen: true, // Yelp doesn't provide real-time open status\n        deliveryAvailable: business.transactions.includes('delivery'),\n        takeoutAvailable: business.transactions.includes('pickup'),\n        dineInAvailable: business.transactions.includes('restaurant_reservation'),\n        features: business.transactions,\n        dietaryOptions: [],\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      }));\n\n      setCachedData(cacheKey, restaurants);\n      return restaurants;\n    } catch (error) {\n      console.error('Yelp API error:', error);\n      throw error;\n    }\n  },\n};\n\n// AI Recommendations API\nexport const aiAPI = {\n  async getRecommendations(request: AIRecommendationRequest): Promise<AIRecommendationResponse> {\n    try {\n      const response = await axios.post<AIRecommendationResponse>(\n        `${API_CONFIG.AI_API_ENDPOINT}/recommendations`,\n        request,\n        {\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        }\n      );\n\n      return response.data;\n    } catch (error) {\n      console.error('AI Recommendations API error:', error);\n      throw error;\n    }\n  },\n\n  async analyzeUserPreferences(userId: string, ratings: any[]): Promise<any> {\n    try {\n      const response = await axios.post(\n        `${API_CONFIG.AI_API_ENDPOINT}/analyze-preferences`,\n        { userId, ratings },\n        {\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        }\n      );\n\n      return response.data;\n    } catch (error) {\n      console.error('AI Analysis API error:', error);\n      throw error;\n    }\n  },\n};\n\n// Firebase integration for user data\nexport const firebaseAPI = {\n  async saveUserRating(rating: any): Promise<void> {\n    // This would integrate with Firebase Firestore\n    console.log('Saving rating to Firebase:', rating);\n  },\n\n  async getUserRatings(userId: string): Promise<any[]> {\n    // This would fetch from Firebase Firestore\n    console.log('Fetching ratings from Firebase for user:', userId);\n    return [];\n  },\n\n  async updateUserPreferences(userId: string, preferences: any): Promise<void> {\n    // This would update Firebase Firestore\n    console.log('Updating preferences in Firebase for user:', userId, preferences);\n  },\n};\n\n// Combined API service\nexport const apiService = {\n  async getNearbyRestaurants(\n    latitude: number,\n    longitude: number,\n    radius: number = 5000\n  ): Promise<Restaurant[]> {\n    try {\n      // Try Google Places first, fallback to Yelp\n      const googleResults = await googlePlacesAPI.searchNearby(latitude, longitude, radius);\n      if (googleResults.length > 0) {\n        return googleResults;\n      }\n\n      const yelpResults = await yelpAPI.searchBusinesses(latitude, longitude, radius);\n      return yelpResults;\n    } catch (error) {\n      console.error('Error fetching nearby restaurants:', error);\n      throw error;\n    }\n  },\n\n  async getAIRecommendations(\n    userId: string,\n    userPreferences: any,\n    recentRatings: any[],\n    location: { latitude: number; longitude: number }\n  ): Promise<Restaurant[]> {\n    try {\n      const recommendations = await aiAPI.getRecommendations({\n        userId,\n        userPreferences,\n        recentRatings,\n        location,\n        limit: 10,\n      });\n\n      // Fetch full restaurant details for recommended IDs\n      const restaurants: Restaurant[] = await Promise.all(\n        recommendations.recommendations.map(async (rec) => {\n          try {\n            return await googlePlacesAPI.getPlaceDetails(rec.restaurantId);\n          } catch {\n            // Fallback to basic restaurant data\n            return {\n              id: rec.restaurantId,\n              name: 'Recommended Restaurant',\n              description: rec.reasoning,\n              cuisine: 'restaurant',\n              priceRange: 'moderate' as const,\n              rating: 0,\n              reviewCount: 0,\n              address: '',\n              city: '',\n              state: '',\n              zipCode: '',\n              phone: '',\n              hours: {},\n              images: [],\n              tags: rec.matchFactors,\n              coordinates: location,\n              isOpen: false,\n              deliveryAvailable: false,\n              takeoutAvailable: false,\n              dineInAvailable: true,\n              features: [],\n              dietaryOptions: [],\n              createdAt: new Date(),\n              updatedAt: new Date(),\n            };\n          }\n        })\n      );\n\n      return restaurants;\n    } catch (error) {\n      console.error('Error getting AI recommendations:', error);\n      throw error;\n    }\n  },\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}