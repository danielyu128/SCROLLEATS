{"ast":null,"code":"import axios from 'axios';\n// API Configuration\nconst API_CONFIG = {\n  GOOGLE_PLACES_API_KEY: 'AIzaSyBTVjUUH3_41kpP83RczmHl2OdlVYNDyCA',\n  YELP_API_KEY: process.env.REACT_APP_YELP_API_KEY,\n  AI_API_ENDPOINT: process.env.REACT_APP_AI_API_ENDPOINT,\n  FIREBASE_CONFIG: {\n    apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n    authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n    projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n    appId: process.env.REACT_APP_FIREBASE_APP_ID\n  }\n};\n\n// Cache for API responses\nconst cache = new Map();\nconst CACHE_DURATION = 5 * 60 * 1000; // 5 minutes\n\n// Helper function to get cached data\nconst getCachedData = key => {\n  const cached = cache.get(key);\n  if (cached && Date.now() - cached.timestamp < CACHE_DURATION) {\n    return cached.data;\n  }\n  return null;\n};\n\n// Helper function to set cached data\nconst setCachedData = (key, data) => {\n  cache.set(key, {\n    data,\n    timestamp: Date.now()\n  });\n};\n\n// Helper function to convert price level to price range\nconst convertPriceLevelToRange = priceLevel => {\n  if (!priceLevel) return 'moderate';\n  switch (priceLevel) {\n    case 1:\n      return 'budget';\n    case 2:\n      return 'moderate';\n    case 3:\n      return 'expensive';\n    case 4:\n      return 'luxury';\n    default:\n      return 'moderate';\n  }\n};\n\n// Helper function to convert Yelp price to price range\nconst convertYelpPriceToRange = price => {\n  if (!price) return 'moderate';\n  switch (price) {\n    case '$':\n      return 'budget';\n    case '$$':\n      return 'moderate';\n    case '$$$':\n      return 'expensive';\n    case '$$$$':\n      return 'luxury';\n    default:\n      return 'moderate';\n  }\n};\n\n// Fallback restaurant data for when API fails\nconst fallbackRestaurants = [{\n  id: 'fallback1',\n  name: 'Local Bistro',\n  description: 'A cozy local bistro serving fresh, seasonal dishes',\n  cuisine: 'American',\n  priceRange: 'moderate',\n  rating: 4.2,\n  reviewCount: 45,\n  address: '123 Main St',\n  city: 'Your City',\n  state: 'CA',\n  zipCode: '12345',\n  phone: '(555) 123-4567',\n  website: '',\n  hours: {},\n  images: ['https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=800'],\n  tags: ['Local', 'American', 'Casual'],\n  coordinates: {\n    latitude: 37.7749,\n    longitude: -122.4194\n  },\n  distance: 0.5,\n  isOpen: true,\n  deliveryAvailable: true,\n  takeoutAvailable: true,\n  dineInAvailable: true,\n  features: [],\n  dietaryOptions: [],\n  createdAt: new Date(),\n  updatedAt: new Date()\n}, {\n  id: 'fallback2',\n  name: 'Pizza Palace',\n  description: 'Authentic Italian pizza and pasta made with fresh ingredients',\n  cuisine: 'Italian',\n  priceRange: 'moderate',\n  rating: 4.5,\n  reviewCount: 78,\n  address: '456 Oak Ave',\n  city: 'Your City',\n  state: 'CA',\n  zipCode: '12345',\n  phone: '(555) 987-6543',\n  website: '',\n  hours: {},\n  images: ['https://images.unsplash.com/photo-1513104890138-7c749659a591?w=800'],\n  tags: ['Italian', 'Pizza', 'Pasta'],\n  coordinates: {\n    latitude: 37.7849,\n    longitude: -122.4094\n  },\n  distance: 1.2,\n  isOpen: true,\n  deliveryAvailable: true,\n  takeoutAvailable: true,\n  dineInAvailable: true,\n  features: [],\n  dietaryOptions: [],\n  createdAt: new Date(),\n  updatedAt: new Date()\n}, {\n  id: 'fallback3',\n  name: 'Sushi Master',\n  description: 'Premium sushi and sashimi with the freshest fish',\n  cuisine: 'Japanese',\n  priceRange: 'expensive',\n  rating: 4.7,\n  reviewCount: 156,\n  address: '789 Pine St',\n  city: 'Your City',\n  state: 'CA',\n  zipCode: '12345',\n  phone: '(555) 456-7890',\n  website: '',\n  hours: {},\n  images: ['https://images.unsplash.com/photo-1579584425555-c3ce17fd4351?w=800'],\n  tags: ['Japanese', 'Sushi', 'Fine Dining'],\n  coordinates: {\n    latitude: 37.7949,\n    longitude: -122.3994\n  },\n  distance: 1.8,\n  isOpen: true,\n  deliveryAvailable: false,\n  takeoutAvailable: true,\n  dineInAvailable: true,\n  features: [],\n  dietaryOptions: [],\n  createdAt: new Date(),\n  updatedAt: new Date()\n}, {\n  id: 'fallback4',\n  name: 'Taco Truck',\n  description: 'Authentic Mexican street food with bold flavors',\n  cuisine: 'Mexican',\n  priceRange: 'budget',\n  rating: 4.3,\n  reviewCount: 92,\n  address: '321 Food Truck Lane',\n  city: 'Your City',\n  state: 'CA',\n  zipCode: '12345',\n  phone: '(555) 321-6540',\n  website: '',\n  hours: {},\n  images: ['https://images.unsplash.com/photo-1565299624946-b28f40a0ca4b?w=800'],\n  tags: ['Mexican', 'Street Food', 'Tacos'],\n  coordinates: {\n    latitude: 37.8049,\n    longitude: -122.3894\n  },\n  distance: 2.3,\n  isOpen: true,\n  deliveryAvailable: true,\n  takeoutAvailable: true,\n  dineInAvailable: false,\n  features: [],\n  dietaryOptions: [],\n  createdAt: new Date(),\n  updatedAt: new Date()\n}, {\n  id: 'fallback5',\n  name: 'Burger Joint',\n  description: 'Classic American burgers with hand-cut fries',\n  cuisine: 'American',\n  priceRange: 'moderate',\n  rating: 4.1,\n  reviewCount: 67,\n  address: '654 Burger Blvd',\n  city: 'Your City',\n  state: 'CA',\n  zipCode: '12345',\n  phone: '(555) 654-3210',\n  website: '',\n  hours: {},\n  images: ['https://images.unsplash.com/photo-1565299624946-b28f40a0ca4b?w=800'],\n  tags: ['American', 'Burgers', 'Casual'],\n  coordinates: {\n    latitude: 37.8149,\n    longitude: -122.3794\n  },\n  distance: 2.8,\n  isOpen: true,\n  deliveryAvailable: true,\n  takeoutAvailable: true,\n  dineInAvailable: true,\n  features: [],\n  dietaryOptions: [],\n  createdAt: new Date(),\n  updatedAt: new Date()\n}];\n\n// Test function to verify API key\nexport const testGooglePlacesAPI = async () => {\n  try {\n    console.log('Testing Google Places API...');\n    const testUrl = `https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=37.7749,-122.4194&radius=1500&type=restaurant&key=${API_CONFIG.GOOGLE_PLACES_API_KEY}`;\n    const response = await axios.get(testUrl, {\n      timeout: 10000\n    });\n    console.log('API Test Response:', response.data);\n    if (response.data.status === 'OK') {\n      console.log('✅ API key is working! Found', response.data.results.length, 'restaurants');\n      return true;\n    } else {\n      console.error('❌ API Error:', response.data.status, response.data.error_message);\n      return false;\n    }\n  } catch (error) {\n    console.error('❌ API Test Failed:', error);\n    return false;\n  }\n};\n\n// Google Places API\nexport const googlePlacesAPI = {\n  async getPlaceAutocomplete(input) {\n    if (!input) return [];\n    try {\n      const response = await axios.get('http://localhost:3001/api/places/autocomplete', {\n        params: {\n          input\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Failed to fetch autocomplete suggestions:', error);\n      return [];\n    }\n  },\n  async getCoordinatesForAddress(params) {\n    try {\n      console.log(`Geocoding with params:`, params);\n      const response = await axios.get('http://localhost:3001/api/geocode', {\n        params,\n        timeout: 10000\n      });\n      return {\n        latitude: response.data.lat,\n        longitude: response.data.lng\n      };\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error(`Failed to geocode with params:`, params, error);\n      if (axios.isAxiosError(error) && (_error$response = error.response) !== null && _error$response !== void 0 && (_error$response$data = _error$response.data) !== null && _error$response$data !== void 0 && _error$response$data.error) {\n        throw new Error(error.response.data.error);\n      }\n      throw new Error('Could not find location. Please try a different search term.');\n    }\n  },\n  async searchNearby(latitude, longitude, radius = 5000, type = 'restaurant') {\n    const cacheKey = `google_places_${latitude}_${longitude}_${radius}_${type}`;\n    const cached = getCachedData(cacheKey);\n    if (cached) return cached;\n    try {\n      console.log('Fetching restaurants from Google Places API via proxy...');\n      console.log('Location:', latitude, longitude);\n      console.log('Radius:', radius);\n      let allRestaurants = [];\n      let nextPageToken;\n      let pageCount = 0;\n      const maxPages = 5; // Get up to 100 restaurants (20 per page)\n\n      do {\n        var _response$data$result;\n        const params = {\n          latitude,\n          longitude,\n          radius: Math.min(radius, 50000),\n          // Max 50km\n          type\n        };\n        if (nextPageToken) {\n          params.pagetoken = nextPageToken;\n        }\n        console.log(`Making API call for page ${pageCount + 1}...`);\n\n        // Use backend proxy to avoid CORS\n        const response = await axios.get('http://localhost:3001/api/places/nearby', {\n          params,\n          timeout: 15000\n        });\n        console.log(`Page ${pageCount + 1} response status:`, response.data.status);\n        console.log(`Page ${pageCount + 1} results count:`, ((_response$data$result = response.data.results) === null || _response$data$result === void 0 ? void 0 : _response$data$result.length) || 0);\n        if (response.data.status !== 'OK' && response.data.status !== 'ZERO_RESULTS') {\n          console.error('API Error:', response.data.status, response.data.error_message);\n          throw new Error(`Google Places API error: ${response.data.status} - ${response.data.error_message || 'Unknown error'}`);\n        }\n        if (response.data.status === 'ZERO_RESULTS') {\n          console.log('No more restaurants found');\n          break;\n        }\n        const restaurants = response.data.results.map(place => {\n          var _place$types, _place$types2, _place$vicinity, _place$vicinity$split, _place$vicinity2, _place$vicinity2$spli, _place$opening_hours;\n          return {\n            id: place.place_id,\n            name: place.name,\n            description: ((_place$types = place.types) === null || _place$types === void 0 ? void 0 : _place$types.join(', ')) || 'Restaurant',\n            cuisine: ((_place$types2 = place.types) === null || _place$types2 === void 0 ? void 0 : _place$types2[0]) || 'restaurant',\n            priceRange: convertPriceLevelToRange(place.price_level),\n            rating: place.rating || 0,\n            reviewCount: place.user_ratings_total || 0,\n            address: place.vicinity || place.formatted_address || '',\n            city: ((_place$vicinity = place.vicinity) === null || _place$vicinity === void 0 ? void 0 : (_place$vicinity$split = _place$vicinity.split(',')[1]) === null || _place$vicinity$split === void 0 ? void 0 : _place$vicinity$split.trim()) || '',\n            state: ((_place$vicinity2 = place.vicinity) === null || _place$vicinity2 === void 0 ? void 0 : (_place$vicinity2$spli = _place$vicinity2.split(',')[2]) === null || _place$vicinity2$spli === void 0 ? void 0 : _place$vicinity2$spli.trim()) || '',\n            zipCode: '',\n            phone: '',\n            website: '',\n            hours: {},\n            images: place.photos ? place.photos.slice(0, 3).map(photo => `https://maps.googleapis.com/maps/api/place/photo?maxwidth=800&photoreference=${photo.photo_reference}&key=${API_CONFIG.GOOGLE_PLACES_API_KEY}`) : ['https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=800', 'https://images.unsplash.com/photo-1559339352-11d035aa65de?w=800', 'https://images.unsplash.com/photo-1565299624946-b28f40a0ca4b?w=800'],\n            tags: place.types || [],\n            coordinates: {\n              latitude: place.geometry.location.lat,\n              longitude: place.geometry.location.lng\n            },\n            distance: 0,\n            // Will be calculated later\n            isOpen: ((_place$opening_hours = place.opening_hours) === null || _place$opening_hours === void 0 ? void 0 : _place$opening_hours.open_now) || false,\n            deliveryAvailable: false,\n            takeoutAvailable: false,\n            dineInAvailable: true,\n            features: [],\n            dietaryOptions: [],\n            createdAt: new Date(),\n            updatedAt: new Date()\n          };\n        });\n        allRestaurants.push(...restaurants);\n        nextPageToken = response.data.next_page_token;\n        pageCount++;\n\n        // Wait 2 seconds before requesting next page (Google API requirement)\n        if (nextPageToken && pageCount < maxPages) {\n          console.log('Waiting 2 seconds before next page...');\n          await new Promise(resolve => setTimeout(resolve, 2000));\n        }\n      } while (nextPageToken && pageCount < maxPages);\n\n      // Remove duplicates based on place_id\n      const uniqueRestaurants = allRestaurants.filter((restaurant, index, self) => index === self.findIndex(r => r.id === restaurant.id));\n\n      // Calculate distances\n      uniqueRestaurants.forEach(restaurant => {\n        const lat1 = latitude;\n        const lon1 = longitude;\n        const lat2 = restaurant.coordinates.latitude;\n        const lon2 = restaurant.coordinates.longitude;\n\n        // Haversine formula to calculate distance\n        const R = 3959; // Earth's radius in miles\n        const dLat = (lat2 - lat1) * Math.PI / 180;\n        const dLon = (lon2 - lon1) * Math.PI / 180;\n        const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n        restaurant.distance = R * c;\n      });\n\n      // Sort by distance\n      uniqueRestaurants.sort((a, b) => (a.distance || 0) - (b.distance || 0));\n      console.log(`Found ${uniqueRestaurants.length} unique restaurants total`);\n      if (uniqueRestaurants.length === 0) {\n        console.log('No restaurants found, using fallback data');\n        return fallbackRestaurants.map(restaurant => ({\n          ...restaurant,\n          coordinates: {\n            latitude,\n            longitude\n          },\n          distance: Math.random() * 2 + 0.1\n        }));\n      }\n      setCachedData(cacheKey, uniqueRestaurants);\n      return uniqueRestaurants;\n    } catch (error) {\n      console.error('Google Places API error:', error);\n\n      // Return fallback data if API fails\n      if (axios.isAxiosError(error)) {\n        var _error$response2, _error$response3, _error$response3$data;\n        console.error('Axios error details:', (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data);\n        if (error.code === 'ERR_NETWORK') {\n          console.log('Network error - backend proxy not running, using fallback data');\n        } else if (((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.status) === 'REQUEST_DENIED') {\n          console.log('API key denied, using fallback data');\n        } else {\n          console.log('Other API error, using fallback data');\n        }\n        return fallbackRestaurants.map(restaurant => ({\n          ...restaurant,\n          coordinates: {\n            latitude,\n            longitude\n          },\n          distance: Math.random() * 2 + 0.1\n        }));\n      }\n      throw new Error(`Failed to fetch restaurants: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  },\n  async getPlaceDetails(placeId) {\n    const cacheKey = `google_place_details_${placeId}`;\n    const cached = getCachedData(cacheKey);\n    if (cached) return cached;\n    try {\n      var _place$types3, _place$types4, _place$formatted_addr, _place$formatted_addr2, _place$formatted_addr3, _place$opening_hours2, _place$opening_hours3, _place$geometry, _place$opening_hours4;\n      const response = await axios.get('https://maps.googleapis.com/maps/api/place/details/json', {\n        params: {\n          place_id: placeId,\n          fields: 'name,formatted_address,formatted_phone_number,website,opening_hours,rating,user_ratings_total,photos,types,price_level,geometry',\n          key: API_CONFIG.GOOGLE_PLACES_API_KEY\n        },\n        timeout: 10000\n      });\n      if (response.data.status !== 'OK') {\n        throw new Error(`Google Places Details API error: ${response.data.status}`);\n      }\n      const place = response.data.result;\n      const restaurant = {\n        id: placeId,\n        name: place.name,\n        description: ((_place$types3 = place.types) === null || _place$types3 === void 0 ? void 0 : _place$types3.join(', ')) || '',\n        cuisine: ((_place$types4 = place.types) === null || _place$types4 === void 0 ? void 0 : _place$types4[0]) || 'restaurant',\n        priceRange: convertPriceLevelToRange(place.price_level),\n        rating: place.rating || 0,\n        reviewCount: place.user_ratings_total || 0,\n        address: place.formatted_address,\n        city: ((_place$formatted_addr = place.formatted_address.split(',')[1]) === null || _place$formatted_addr === void 0 ? void 0 : _place$formatted_addr.trim()) || '',\n        state: ((_place$formatted_addr2 = place.formatted_address.split(',')[2]) === null || _place$formatted_addr2 === void 0 ? void 0 : _place$formatted_addr2.trim()) || '',\n        zipCode: ((_place$formatted_addr3 = place.formatted_address.split(',')[3]) === null || _place$formatted_addr3 === void 0 ? void 0 : _place$formatted_addr3.trim()) || '',\n        phone: place.formatted_phone_number || '',\n        website: place.website || '',\n        hours: ((_place$opening_hours2 = place.opening_hours) === null || _place$opening_hours2 === void 0 ? void 0 : (_place$opening_hours3 = _place$opening_hours2.weekday_text) === null || _place$opening_hours3 === void 0 ? void 0 : _place$opening_hours3.reduce((acc, day) => {\n          const [dayName, hours] = day.split(': ');\n          acc[dayName] = hours;\n          return acc;\n        }, {})) || {},\n        images: place.photos ? place.photos.slice(0, 5).map(photo => `https://maps.googleapis.com/maps/api/place/photo?maxwidth=1200&photoreference=${photo.photo_reference}&key=${API_CONFIG.GOOGLE_PLACES_API_KEY}`) : ['https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=1200'],\n        tags: place.types || [],\n        coordinates: (_place$geometry = place.geometry) !== null && _place$geometry !== void 0 && _place$geometry.location ? {\n          latitude: place.geometry.location.lat,\n          longitude: place.geometry.location.lng\n        } : {\n          latitude: 0,\n          longitude: 0\n        },\n        isOpen: ((_place$opening_hours4 = place.opening_hours) === null || _place$opening_hours4 === void 0 ? void 0 : _place$opening_hours4.open_now) || false,\n        deliveryAvailable: false,\n        takeoutAvailable: false,\n        dineInAvailable: true,\n        features: [],\n        dietaryOptions: [],\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n      setCachedData(cacheKey, restaurant);\n      return restaurant;\n    } catch (error) {\n      console.error('Google Places Details API error:', error);\n      throw error;\n    }\n  },\n  async getPlaceReviews(placeId) {\n    const cacheKey = `reviews_${placeId}`;\n    const cached = getCachedData(cacheKey);\n    if (cached) return cached;\n    try {\n      var _response$data$result2;\n      const response = await axios.get(`/api/places/reviews/${placeId}`);\n      if (response.data.status === 'OK' && (_response$data$result2 = response.data.result) !== null && _response$data$result2 !== void 0 && _response$data$result2.reviews) {\n        const reviews = response.data.result.reviews;\n        setCachedData(cacheKey, reviews);\n        return reviews;\n      }\n      return [];\n    } catch (error) {\n      console.error('Error fetching reviews:', error);\n      return [];\n    }\n  }\n};\n\n// Yelp API\nexport const yelpAPI = {\n  async searchBusinesses(latitude, longitude, radius = 5000, limit = 20) {\n    const cacheKey = `yelp_${latitude}_${longitude}_${radius}_${limit}`;\n    const cached = getCachedData(cacheKey);\n    if (cached) return cached;\n    try {\n      const response = await axios.get('https://api.yelp.com/v3/businesses/search', {\n        headers: {\n          Authorization: `Bearer ${API_CONFIG.YELP_API_KEY}`\n        },\n        params: {\n          latitude,\n          longitude,\n          radius,\n          limit,\n          categories: 'restaurants',\n          sort_by: 'rating'\n        }\n      });\n      const restaurants = response.data.businesses.map(business => {\n        var _business$categories$;\n        return {\n          id: business.id,\n          name: business.name,\n          description: business.categories.map(cat => cat.title).join(', '),\n          cuisine: ((_business$categories$ = business.categories[0]) === null || _business$categories$ === void 0 ? void 0 : _business$categories$.title) || 'restaurant',\n          priceRange: convertYelpPriceToRange(business.price),\n          rating: business.rating,\n          reviewCount: business.review_count,\n          address: business.location.address1,\n          city: business.location.city,\n          state: business.location.state,\n          zipCode: business.location.zip_code,\n          phone: business.phone,\n          website: business.url,\n          hours: {},\n          images: [business.image_url],\n          tags: business.categories.map(cat => cat.title),\n          coordinates: {\n            latitude: business.coordinates.latitude,\n            longitude: business.coordinates.longitude\n          },\n          distance: business.distance / 1609.34,\n          // Convert meters to miles\n          isOpen: true,\n          // Yelp doesn't provide real-time open status\n          deliveryAvailable: business.transactions.includes('delivery'),\n          takeoutAvailable: business.transactions.includes('pickup'),\n          dineInAvailable: business.transactions.includes('restaurant_reservation'),\n          features: business.transactions,\n          dietaryOptions: [],\n          createdAt: new Date(),\n          updatedAt: new Date()\n        };\n      });\n      setCachedData(cacheKey, restaurants);\n      return restaurants;\n    } catch (error) {\n      console.error('Yelp API error:', error);\n      throw error;\n    }\n  }\n};\n\n// AI Recommendations API\nexport const aiAPI = {\n  async getRecommendations(request) {\n    try {\n      const response = await axios.post(`${API_CONFIG.AI_API_ENDPOINT}/recommendations`, request, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('AI Recommendations API error:', error);\n      throw error;\n    }\n  },\n  async analyzeUserPreferences(userId, ratings) {\n    try {\n      const response = await axios.post(`${API_CONFIG.AI_API_ENDPOINT}/analyze-preferences`, {\n        userId,\n        ratings\n      }, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('AI Analysis API error:', error);\n      throw error;\n    }\n  }\n};\n\n// Firebase integration for user data\nexport const firebaseAPI = {\n  async saveUserRating(rating) {\n    // This would integrate with Firebase Firestore\n    console.log('Saving rating to Firebase:', rating);\n  },\n  async getUserRatings(userId) {\n    // This would fetch from Firebase Firestore\n    console.log('Fetching ratings from Firebase for user:', userId);\n    return [];\n  },\n  async updateUserPreferences(userId, preferences) {\n    // This would update Firebase Firestore\n    console.log('Updating preferences in Firebase for user:', userId, preferences);\n  }\n};\n\n// Combined API service\nexport const apiService = {\n  getPlaceAutocomplete: input => googlePlacesAPI.getPlaceAutocomplete(input),\n  getCoordinatesForAddress: params => googlePlacesAPI.getCoordinatesForAddress(params),\n  getNearbyRestaurants: (latitude, longitude, radius) => googlePlacesAPI.searchNearby(latitude, longitude, radius),\n  getPlaceDetails: placeId => googlePlacesAPI.getPlaceDetails(placeId),\n  async getAIRecommendations(userId, userPreferences, recentRatings, location) {\n    try {\n      const recommendations = await aiAPI.getRecommendations({\n        userId,\n        userPreferences,\n        recentRatings,\n        location,\n        limit: 10\n      });\n\n      // Fetch full restaurant details for recommended IDs\n      const restaurants = await Promise.all(recommendations.recommendations.map(async rec => {\n        try {\n          return await googlePlacesAPI.getPlaceDetails(rec.restaurantId);\n        } catch {\n          // Fallback to basic restaurant data\n          return {\n            id: rec.restaurantId,\n            name: 'Recommended Restaurant',\n            description: rec.reasoning,\n            cuisine: 'restaurant',\n            priceRange: 'moderate',\n            rating: 0,\n            reviewCount: 0,\n            address: '',\n            city: '',\n            state: '',\n            zipCode: '',\n            phone: '',\n            hours: {},\n            images: [],\n            tags: rec.matchFactors,\n            coordinates: location,\n            isOpen: false,\n            deliveryAvailable: false,\n            takeoutAvailable: false,\n            dineInAvailable: true,\n            features: [],\n            dietaryOptions: [],\n            createdAt: new Date(),\n            updatedAt: new Date()\n          };\n        }\n      }));\n      return restaurants;\n    } catch (error) {\n      console.error('Error getting AI recommendations:', error);\n      throw error;\n    }\n  },\n  async searchRestaurants(query, location, radius = 50000) {\n    try {\n      console.log('Searching restaurants with:', {\n        query,\n        location,\n        radius\n      });\n      const cacheKey = `search_${query}_${location ? `${location.latitude},${location.longitude}` : 'global'}_${radius}`;\n      const cached = getCachedData(cacheKey);\n      if (cached) {\n        console.log('Returning cached results:', cached.length);\n        return cached;\n      }\n      const params = {\n        query,\n        type: 'restaurant',\n        radius\n      };\n      if (location) {\n        params.location = `${location.latitude},${location.longitude}`;\n      }\n      console.log('Making search API call with params:', params);\n      const response = await axios.get('http://localhost:3001/api/places/search', {\n        params\n      });\n      console.log('Search API response:', response.data);\n      if (response.data.status === 'OK' && response.data.results) {\n        console.log('Found', response.data.results.length, 'restaurants');\n\n        // Get detailed information for each restaurant to get photos\n        const restaurants = await Promise.all(response.data.results.map(async place => {\n          try {\n            var _place$types5, _details$opening_hour;\n            console.log(`Getting details for: ${place.name} (${place.place_id})`);\n\n            // Make a separate details call to get photos\n            const detailsResponse = await axios.get('https://maps.googleapis.com/maps/api/place/details/json', {\n              params: {\n                place_id: place.place_id,\n                fields: 'photos,formatted_phone_number,website,opening_hours',\n                key: API_CONFIG.GOOGLE_PLACES_API_KEY\n              },\n              timeout: 15000\n            });\n            console.log(`Details response for ${place.name}:`, detailsResponse.data.status);\n            if (detailsResponse.data.status !== 'OK') {\n              console.error(`Details API error for ${place.name}:`, detailsResponse.data.status);\n              throw new Error(`Details API error: ${detailsResponse.data.status}`);\n            }\n            const details = detailsResponse.data.result;\n            console.log(`Details for ${place.name}:`, details !== null && details !== void 0 && details.photos ? `${details.photos.length} photos found` : 'No photos');\n\n            // Check if we have photos and they're valid\n            let images = ['https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=800', 'https://images.unsplash.com/photo-1559339352-11d035aa65de?w=800', 'https://images.unsplash.com/photo-1565299624946-b28f40a0ca4b?w=800'];\n            if (details !== null && details !== void 0 && details.photos && details.photos.length > 0) {\n              console.log(`Processing ${details.photos.length} photos for ${place.name}`);\n              images = details.photos.slice(0, 3).map(photo => {\n                const photoUrl = `https://maps.googleapis.com/maps/api/place/photo?maxwidth=800&photoreference=${photo.photo_reference}&key=${API_CONFIG.GOOGLE_PLACES_API_KEY}`;\n                console.log(`Generated photo URL for ${place.name}:`, photoUrl);\n                return photoUrl;\n              });\n            } else {\n              console.log(`No photos found for ${place.name}, using fallback images`);\n            }\n            return {\n              id: place.place_id,\n              name: place.name,\n              description: place.formatted_address,\n              cuisine: this.extractCuisineFromTypes(place.types),\n              priceRange: convertPriceLevelToRange(place.price_level),\n              rating: place.rating || 0,\n              reviewCount: place.user_ratings_total || 0,\n              address: place.formatted_address,\n              city: this.extractCityFromAddress(place.formatted_address),\n              state: this.extractStateFromAddress(place.formatted_address),\n              zipCode: this.extractZipFromAddress(place.formatted_address),\n              phone: (details === null || details === void 0 ? void 0 : details.formatted_phone_number) || '',\n              website: (details === null || details === void 0 ? void 0 : details.website) || '',\n              hours: (details === null || details === void 0 ? void 0 : details.opening_hours) || {},\n              images: images,\n              tags: ((_place$types5 = place.types) === null || _place$types5 === void 0 ? void 0 : _place$types5.slice(0, 5)) || [],\n              coordinates: {\n                latitude: place.geometry.location.lat,\n                longitude: place.geometry.location.lng\n              },\n              distance: 0,\n              // Will be calculated if location is provided\n              isOpen: (details === null || details === void 0 ? void 0 : (_details$opening_hour = details.opening_hours) === null || _details$opening_hour === void 0 ? void 0 : _details$opening_hour.open_now) || false,\n              deliveryAvailable: false,\n              takeoutAvailable: false,\n              dineInAvailable: true,\n              features: [],\n              dietaryOptions: [],\n              createdAt: new Date(),\n              updatedAt: new Date()\n            };\n          } catch (error) {\n            var _place$types6;\n            console.error('Error getting details for place:', place.place_id, error);\n            // Return basic restaurant data if details call fails\n            return {\n              id: place.place_id,\n              name: place.name,\n              description: place.formatted_address,\n              cuisine: this.extractCuisineFromTypes(place.types),\n              priceRange: convertPriceLevelToRange(place.price_level),\n              rating: place.rating || 0,\n              reviewCount: place.user_ratings_total || 0,\n              address: place.formatted_address,\n              city: this.extractCityFromAddress(place.formatted_address),\n              state: this.extractStateFromAddress(place.formatted_address),\n              zipCode: this.extractZipFromAddress(place.formatted_address),\n              phone: '',\n              website: '',\n              hours: {},\n              images: ['https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=800', 'https://images.unsplash.com/photo-1559339352-11d035aa65de?w=800', 'https://images.unsplash.com/photo-1565299624946-b28f40a0ca4b?w=800'],\n              tags: ((_place$types6 = place.types) === null || _place$types6 === void 0 ? void 0 : _place$types6.slice(0, 5)) || [],\n              coordinates: {\n                latitude: place.geometry.location.lat,\n                longitude: place.geometry.location.lng\n              },\n              distance: 0,\n              isOpen: false,\n              deliveryAvailable: false,\n              takeoutAvailable: false,\n              dineInAvailable: true,\n              features: [],\n              dietaryOptions: [],\n              createdAt: new Date(),\n              updatedAt: new Date()\n            };\n          }\n        }));\n\n        // Calculate distances if location is provided\n        if (location) {\n          restaurants.forEach(restaurant => {\n            restaurant.distance = this.calculateDistance(location.latitude, location.longitude, restaurant.coordinates.latitude, restaurant.coordinates.longitude);\n          });\n        }\n        setCachedData(cacheKey, restaurants);\n        console.log('Returning', restaurants.length, 'processed restaurants');\n        return restaurants;\n      }\n      console.log('No results found or API error');\n      return [];\n    } catch (error) {\n      console.error('Error searching restaurants:', error);\n      return [];\n    }\n  },\n  extractCuisineFromTypes(types) {\n    const cuisineTypes = ['restaurant', 'food', 'meal_takeaway', 'meal_delivery', 'american_restaurant', 'italian_restaurant', 'chinese_restaurant', 'japanese_restaurant', 'mexican_restaurant', 'indian_restaurant', 'thai_restaurant', 'vietnamese_restaurant', 'korean_restaurant', 'french_restaurant', 'greek_restaurant', 'mediterranean_restaurant', 'pizza_restaurant', 'burger_restaurant', 'seafood_restaurant', 'steakhouse', 'barbecue_restaurant', 'sushi_restaurant'];\n    for (const type of types) {\n      if (cuisineTypes.includes(type)) {\n        return type.replace('_restaurant', '').replace('_', ' ').replace(/\\b\\w/g, l => l.toUpperCase());\n      }\n    }\n    return 'Restaurant';\n  },\n  extractCityFromAddress(address) {\n    const parts = address.split(',');\n    if (parts.length >= 2) {\n      var _parts$;\n      return ((_parts$ = parts[1]) === null || _parts$ === void 0 ? void 0 : _parts$.trim()) || '';\n    }\n    return '';\n  },\n  extractStateFromAddress(address) {\n    const parts = address.split(',');\n    if (parts.length >= 3) {\n      var _parts$2;\n      const statePart = (_parts$2 = parts[2]) === null || _parts$2 === void 0 ? void 0 : _parts$2.trim();\n      return (statePart === null || statePart === void 0 ? void 0 : statePart.split(' ')[0]) || '';\n    }\n    return '';\n  },\n  extractZipFromAddress(address) {\n    const parts = address.split(',');\n    if (parts.length >= 3) {\n      var _parts$3;\n      const statePart = (_parts$3 = parts[2]) === null || _parts$3 === void 0 ? void 0 : _parts$3.trim();\n      const zipMatch = statePart === null || statePart === void 0 ? void 0 : statePart.match(/\\d{5}/);\n      return zipMatch ? zipMatch[0] : '';\n    }\n    return '';\n  },\n  calculateDistance(lat1, lon1, lat2, lon2) {\n    // Implement the Haversine formula to calculate distance between two points\n    const R = 3959; // Earth's radius in miles\n    const dLat = (lat2 - lat1) * Math.PI / 180;\n    const dLon = (lon2 - lon1) * Math.PI / 180;\n    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    return R * c;\n  }\n};","map":{"version":3,"names":["axios","API_CONFIG","GOOGLE_PLACES_API_KEY","YELP_API_KEY","process","env","REACT_APP_YELP_API_KEY","AI_API_ENDPOINT","REACT_APP_AI_API_ENDPOINT","FIREBASE_CONFIG","apiKey","REACT_APP_FIREBASE_API_KEY","authDomain","REACT_APP_FIREBASE_AUTH_DOMAIN","projectId","REACT_APP_FIREBASE_PROJECT_ID","storageBucket","REACT_APP_FIREBASE_STORAGE_BUCKET","messagingSenderId","REACT_APP_FIREBASE_MESSAGING_SENDER_ID","appId","REACT_APP_FIREBASE_APP_ID","cache","Map","CACHE_DURATION","getCachedData","key","cached","get","Date","now","timestamp","data","setCachedData","set","convertPriceLevelToRange","priceLevel","convertYelpPriceToRange","price","fallbackRestaurants","id","name","description","cuisine","priceRange","rating","reviewCount","address","city","state","zipCode","phone","website","hours","images","tags","coordinates","latitude","longitude","distance","isOpen","deliveryAvailable","takeoutAvailable","dineInAvailable","features","dietaryOptions","createdAt","updatedAt","testGooglePlacesAPI","console","log","testUrl","response","timeout","status","results","length","error","error_message","googlePlacesAPI","getPlaceAutocomplete","input","params","getCoordinatesForAddress","lat","lng","_error$response","_error$response$data","isAxiosError","Error","searchNearby","radius","type","cacheKey","allRestaurants","nextPageToken","pageCount","maxPages","_response$data$result","Math","min","pagetoken","restaurants","map","place","_place$types","_place$types2","_place$vicinity","_place$vicinity$split","_place$vicinity2","_place$vicinity2$spli","_place$opening_hours","place_id","types","join","price_level","user_ratings_total","vicinity","formatted_address","split","trim","photos","slice","photo","photo_reference","geometry","location","opening_hours","open_now","push","next_page_token","Promise","resolve","setTimeout","uniqueRestaurants","filter","restaurant","index","self","findIndex","r","forEach","lat1","lon1","lat2","lon2","R","dLat","PI","dLon","a","sin","cos","c","atan2","sqrt","sort","b","random","_error$response2","_error$response3","_error$response3$data","code","message","getPlaceDetails","placeId","_place$types3","_place$types4","_place$formatted_addr","_place$formatted_addr2","_place$formatted_addr3","_place$opening_hours2","_place$opening_hours3","_place$geometry","_place$opening_hours4","fields","result","formatted_phone_number","weekday_text","reduce","acc","day","dayName","getPlaceReviews","_response$data$result2","reviews","yelpAPI","searchBusinesses","limit","headers","Authorization","categories","sort_by","businesses","business","_business$categories$","cat","title","review_count","address1","zip_code","url","image_url","transactions","includes","aiAPI","getRecommendations","request","post","analyzeUserPreferences","userId","ratings","firebaseAPI","saveUserRating","getUserRatings","updateUserPreferences","preferences","apiService","getNearbyRestaurants","getAIRecommendations","userPreferences","recentRatings","recommendations","all","rec","restaurantId","reasoning","matchFactors","searchRestaurants","query","_place$types5","_details$opening_hour","detailsResponse","details","photoUrl","extractCuisineFromTypes","extractCityFromAddress","extractStateFromAddress","extractZipFromAddress","_place$types6","calculateDistance","cuisineTypes","replace","l","toUpperCase","parts","_parts$","_parts$2","statePart","_parts$3","zipMatch","match"],"sources":["/Users/andrewnguyen/scrollEats/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\nimport { Restaurant, GooglePlacesResponse, YelpResponse, AIRecommendationRequest, AIRecommendationResponse } from '../types';\n\n// API Configuration\nconst API_CONFIG = {\n  GOOGLE_PLACES_API_KEY: 'AIzaSyBTVjUUH3_41kpP83RczmHl2OdlVYNDyCA',\n  YELP_API_KEY: process.env.REACT_APP_YELP_API_KEY,\n  AI_API_ENDPOINT: process.env.REACT_APP_AI_API_ENDPOINT,\n  FIREBASE_CONFIG: {\n    apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n    authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n    projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n    appId: process.env.REACT_APP_FIREBASE_APP_ID,\n  },\n};\n\n// Cache for API responses\nconst cache = new Map<string, { data: any; timestamp: number }>();\nconst CACHE_DURATION = 5 * 60 * 1000; // 5 minutes\n\n// Helper function to get cached data\nconst getCachedData = (key: string) => {\n  const cached = cache.get(key);\n  if (cached && Date.now() - cached.timestamp < CACHE_DURATION) {\n    return cached.data;\n  }\n  return null;\n};\n\n// Helper function to set cached data\nconst setCachedData = (key: string, data: any) => {\n  cache.set(key, { data, timestamp: Date.now() });\n};\n\n// Helper function to convert price level to price range\nconst convertPriceLevelToRange = (priceLevel?: number): Restaurant['priceRange'] => {\n  if (!priceLevel) return 'moderate';\n  switch (priceLevel) {\n    case 1: return 'budget';\n    case 2: return 'moderate';\n    case 3: return 'expensive';\n    case 4: return 'luxury';\n    default: return 'moderate';\n  }\n};\n\n// Helper function to convert Yelp price to price range\nconst convertYelpPriceToRange = (price?: string): Restaurant['priceRange'] => {\n  if (!price) return 'moderate';\n  switch (price) {\n    case '$': return 'budget';\n    case '$$': return 'moderate';\n    case '$$$': return 'expensive';\n    case '$$$$': return 'luxury';\n    default: return 'moderate';\n  }\n};\n\n// Fallback restaurant data for when API fails\nconst fallbackRestaurants: Restaurant[] = [\n  {\n    id: 'fallback1',\n    name: 'Local Bistro',\n    description: 'A cozy local bistro serving fresh, seasonal dishes',\n    cuisine: 'American',\n    priceRange: 'moderate',\n    rating: 4.2,\n    reviewCount: 45,\n    address: '123 Main St',\n    city: 'Your City',\n    state: 'CA',\n    zipCode: '12345',\n    phone: '(555) 123-4567',\n    website: '',\n    hours: {},\n    images: ['https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=800'],\n    tags: ['Local', 'American', 'Casual'],\n    coordinates: { latitude: 37.7749, longitude: -122.4194 },\n    distance: 0.5,\n    isOpen: true,\n    deliveryAvailable: true,\n    takeoutAvailable: true,\n    dineInAvailable: true,\n    features: [],\n    dietaryOptions: [],\n    createdAt: new Date(),\n    updatedAt: new Date(),\n  },\n  {\n    id: 'fallback2',\n    name: 'Pizza Palace',\n    description: 'Authentic Italian pizza and pasta made with fresh ingredients',\n    cuisine: 'Italian',\n    priceRange: 'moderate',\n    rating: 4.5,\n    reviewCount: 78,\n    address: '456 Oak Ave',\n    city: 'Your City',\n    state: 'CA',\n    zipCode: '12345',\n    phone: '(555) 987-6543',\n    website: '',\n    hours: {},\n    images: ['https://images.unsplash.com/photo-1513104890138-7c749659a591?w=800'],\n    tags: ['Italian', 'Pizza', 'Pasta'],\n    coordinates: { latitude: 37.7849, longitude: -122.4094 },\n    distance: 1.2,\n    isOpen: true,\n    deliveryAvailable: true,\n    takeoutAvailable: true,\n    dineInAvailable: true,\n    features: [],\n    dietaryOptions: [],\n    createdAt: new Date(),\n    updatedAt: new Date(),\n  },\n  {\n    id: 'fallback3',\n    name: 'Sushi Master',\n    description: 'Premium sushi and sashimi with the freshest fish',\n    cuisine: 'Japanese',\n    priceRange: 'expensive',\n    rating: 4.7,\n    reviewCount: 156,\n    address: '789 Pine St',\n    city: 'Your City',\n    state: 'CA',\n    zipCode: '12345',\n    phone: '(555) 456-7890',\n    website: '',\n    hours: {},\n    images: ['https://images.unsplash.com/photo-1579584425555-c3ce17fd4351?w=800'],\n    tags: ['Japanese', 'Sushi', 'Fine Dining'],\n    coordinates: { latitude: 37.7949, longitude: -122.3994 },\n    distance: 1.8,\n    isOpen: true,\n    deliveryAvailable: false,\n    takeoutAvailable: true,\n    dineInAvailable: true,\n    features: [],\n    dietaryOptions: [],\n    createdAt: new Date(),\n    updatedAt: new Date(),\n  },\n  {\n    id: 'fallback4',\n    name: 'Taco Truck',\n    description: 'Authentic Mexican street food with bold flavors',\n    cuisine: 'Mexican',\n    priceRange: 'budget',\n    rating: 4.3,\n    reviewCount: 92,\n    address: '321 Food Truck Lane',\n    city: 'Your City',\n    state: 'CA',\n    zipCode: '12345',\n    phone: '(555) 321-6540',\n    website: '',\n    hours: {},\n    images: ['https://images.unsplash.com/photo-1565299624946-b28f40a0ca4b?w=800'],\n    tags: ['Mexican', 'Street Food', 'Tacos'],\n    coordinates: { latitude: 37.8049, longitude: -122.3894 },\n    distance: 2.3,\n    isOpen: true,\n    deliveryAvailable: true,\n    takeoutAvailable: true,\n    dineInAvailable: false,\n    features: [],\n    dietaryOptions: [],\n    createdAt: new Date(),\n    updatedAt: new Date(),\n  },\n  {\n    id: 'fallback5',\n    name: 'Burger Joint',\n    description: 'Classic American burgers with hand-cut fries',\n    cuisine: 'American',\n    priceRange: 'moderate',\n    rating: 4.1,\n    reviewCount: 67,\n    address: '654 Burger Blvd',\n    city: 'Your City',\n    state: 'CA',\n    zipCode: '12345',\n    phone: '(555) 654-3210',\n    website: '',\n    hours: {},\n    images: ['https://images.unsplash.com/photo-1565299624946-b28f40a0ca4b?w=800'],\n    tags: ['American', 'Burgers', 'Casual'],\n    coordinates: { latitude: 37.8149, longitude: -122.3794 },\n    distance: 2.8,\n    isOpen: true,\n    deliveryAvailable: true,\n    takeoutAvailable: true,\n    dineInAvailable: true,\n    features: [],\n    dietaryOptions: [],\n    createdAt: new Date(),\n    updatedAt: new Date(),\n  },\n];\n\n// Test function to verify API key\nexport const testGooglePlacesAPI = async () => {\n  try {\n    console.log('Testing Google Places API...');\n    const testUrl = `https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=37.7749,-122.4194&radius=1500&type=restaurant&key=${API_CONFIG.GOOGLE_PLACES_API_KEY}`;\n    \n    const response = await axios.get(testUrl, { timeout: 10000 });\n    console.log('API Test Response:', response.data);\n    \n    if (response.data.status === 'OK') {\n      console.log('✅ API key is working! Found', response.data.results.length, 'restaurants');\n      return true;\n    } else {\n      console.error('❌ API Error:', response.data.status, response.data.error_message);\n      return false;\n    }\n  } catch (error) {\n    console.error('❌ API Test Failed:', error);\n    return false;\n  }\n};\n\n// Google Places API\nexport const googlePlacesAPI = {\n  async getPlaceAutocomplete(input: string): Promise<any[]> {\n    if (!input) return [];\n    try {\n      const response = await axios.get('http://localhost:3001/api/places/autocomplete', {\n        params: { input },\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Failed to fetch autocomplete suggestions:', error);\n      return [];\n    }\n  },\n\n  async getCoordinatesForAddress(params: { address?: string; placeId?: string }): Promise<{ latitude: number; longitude: number }> {\n    try {\n      console.log(`Geocoding with params:`, params);\n      const response = await axios.get<{ lat: number; lng: number }>(\n        'http://localhost:3001/api/geocode',\n        { \n          params,\n          timeout: 10000,\n        }\n      );\n      return { latitude: response.data.lat, longitude: response.data.lng };\n    } catch (error) {\n      console.error(`Failed to geocode with params:`, params, error);\n      if (axios.isAxiosError(error) && error.response?.data?.error) {\n        throw new Error(error.response.data.error);\n      }\n      throw new Error('Could not find location. Please try a different search term.');\n    }\n  },\n\n  async searchNearby(\n    latitude: number,\n    longitude: number,\n    radius: number = 5000,\n    type: string = 'restaurant'\n  ): Promise<Restaurant[]> {\n    const cacheKey = `google_places_${latitude}_${longitude}_${radius}_${type}`;\n    const cached = getCachedData(cacheKey);\n    if (cached) return cached;\n\n    try {\n      console.log('Fetching restaurants from Google Places API via proxy...');\n      console.log('Location:', latitude, longitude);\n      console.log('Radius:', radius);\n      \n      let allRestaurants: Restaurant[] = [];\n      let nextPageToken: string | undefined;\n      let pageCount = 0;\n      const maxPages = 5; // Get up to 100 restaurants (20 per page)\n      \n      do {\n        const params: any = {\n          latitude,\n          longitude,\n          radius: Math.min(radius, 50000), // Max 50km\n          type,\n        };\n        \n        if (nextPageToken) {\n          params.pagetoken = nextPageToken;\n        }\n        \n        console.log(`Making API call for page ${pageCount + 1}...`);\n        \n        // Use backend proxy to avoid CORS\n        const response = await axios.get<GooglePlacesResponse>(\n          'http://localhost:3001/api/places/nearby',\n          {\n            params,\n            timeout: 15000,\n          }\n        );\n\n        console.log(`Page ${pageCount + 1} response status:`, response.data.status);\n        console.log(`Page ${pageCount + 1} results count:`, response.data.results?.length || 0);\n\n        if (response.data.status !== 'OK' && response.data.status !== 'ZERO_RESULTS') {\n          console.error('API Error:', response.data.status, response.data.error_message);\n          throw new Error(`Google Places API error: ${response.data.status} - ${response.data.error_message || 'Unknown error'}`);\n        }\n\n        if (response.data.status === 'ZERO_RESULTS') {\n          console.log('No more restaurants found');\n          break;\n        }\n\n        const restaurants: Restaurant[] = response.data.results.map((place) => ({\n          id: place.place_id,\n          name: place.name,\n          description: place.types?.join(', ') || 'Restaurant',\n          cuisine: place.types?.[0] || 'restaurant',\n          priceRange: convertPriceLevelToRange(place.price_level),\n          rating: place.rating || 0,\n          reviewCount: place.user_ratings_total || 0,\n          address: place.vicinity || place.formatted_address || '',\n          city: place.vicinity?.split(',')[1]?.trim() || '',\n          state: place.vicinity?.split(',')[2]?.trim() || '',\n          zipCode: '',\n          phone: '',\n          website: '',\n          hours: {},\n          images: place.photos ? \n            place.photos.slice(0, 3).map((photo: any) => \n              `https://maps.googleapis.com/maps/api/place/photo?maxwidth=800&photoreference=${photo.photo_reference}&key=${API_CONFIG.GOOGLE_PLACES_API_KEY}`\n            ) : [\n              'https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=800',\n              'https://images.unsplash.com/photo-1559339352-11d035aa65de?w=800',\n              'https://images.unsplash.com/photo-1565299624946-b28f40a0ca4b?w=800'\n            ],\n          tags: place.types || [],\n          coordinates: {\n            latitude: place.geometry.location.lat,\n            longitude: place.geometry.location.lng,\n          },\n          distance: 0, // Will be calculated later\n          isOpen: place.opening_hours?.open_now || false,\n          deliveryAvailable: false,\n          takeoutAvailable: false,\n          dineInAvailable: true,\n          features: [],\n          dietaryOptions: [],\n          createdAt: new Date(),\n          updatedAt: new Date(),\n        }));\n\n        allRestaurants.push(...restaurants);\n        nextPageToken = response.data.next_page_token;\n        pageCount++;\n        \n        // Wait 2 seconds before requesting next page (Google API requirement)\n        if (nextPageToken && pageCount < maxPages) {\n          console.log('Waiting 2 seconds before next page...');\n          await new Promise(resolve => setTimeout(resolve, 2000));\n        }\n        \n      } while (nextPageToken && pageCount < maxPages);\n\n      // Remove duplicates based on place_id\n      const uniqueRestaurants = allRestaurants.filter((restaurant, index, self) => \n        index === self.findIndex(r => r.id === restaurant.id)\n      );\n\n      // Calculate distances\n      uniqueRestaurants.forEach(restaurant => {\n        const lat1 = latitude;\n        const lon1 = longitude;\n        const lat2 = restaurant.coordinates.latitude;\n        const lon2 = restaurant.coordinates.longitude;\n        \n        // Haversine formula to calculate distance\n        const R = 3959; // Earth's radius in miles\n        const dLat = (lat2 - lat1) * Math.PI / 180;\n        const dLon = (lon2 - lon1) * Math.PI / 180;\n        const a = Math.sin(dLat/2) * Math.sin(dLat/2) +\n                  Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *\n                  Math.sin(dLon/2) * Math.sin(dLon/2);\n        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n        restaurant.distance = R * c;\n      });\n\n      // Sort by distance\n      uniqueRestaurants.sort((a, b) => (a.distance || 0) - (b.distance || 0));\n\n      console.log(`Found ${uniqueRestaurants.length} unique restaurants total`);\n      \n      if (uniqueRestaurants.length === 0) {\n        console.log('No restaurants found, using fallback data');\n        return fallbackRestaurants.map(restaurant => ({\n          ...restaurant,\n          coordinates: { latitude, longitude },\n          distance: Math.random() * 2 + 0.1,\n        }));\n      }\n      \n      setCachedData(cacheKey, uniqueRestaurants);\n      return uniqueRestaurants;\n      \n    } catch (error) {\n      console.error('Google Places API error:', error);\n      \n      // Return fallback data if API fails\n      if (axios.isAxiosError(error)) {\n        console.error('Axios error details:', error.response?.data);\n        \n        if (error.code === 'ERR_NETWORK') {\n          console.log('Network error - backend proxy not running, using fallback data');\n        } else if (error.response?.data?.status === 'REQUEST_DENIED') {\n          console.log('API key denied, using fallback data');\n        } else {\n          console.log('Other API error, using fallback data');\n        }\n        \n        return fallbackRestaurants.map(restaurant => ({\n          ...restaurant,\n          coordinates: { latitude, longitude },\n          distance: Math.random() * 2 + 0.1,\n        }));\n      }\n      \n      throw new Error(`Failed to fetch restaurants: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  },\n\n  async getPlaceDetails(placeId: string): Promise<Restaurant> {\n    const cacheKey = `google_place_details_${placeId}`;\n    const cached = getCachedData(cacheKey);\n    if (cached) return cached;\n\n    try {\n      const response = await axios.get(\n        'https://maps.googleapis.com/maps/api/place/details/json',\n        {\n          params: {\n            place_id: placeId,\n            fields: 'name,formatted_address,formatted_phone_number,website,opening_hours,rating,user_ratings_total,photos,types,price_level,geometry',\n            key: API_CONFIG.GOOGLE_PLACES_API_KEY,\n          },\n          timeout: 10000,\n        }\n      );\n\n      if (response.data.status !== 'OK') {\n        throw new Error(`Google Places Details API error: ${response.data.status}`);\n      }\n\n      const place = response.data.result;\n      const restaurant: Restaurant = {\n        id: placeId,\n        name: place.name,\n        description: place.types?.join(', ') || '',\n        cuisine: place.types?.[0] || 'restaurant',\n        priceRange: convertPriceLevelToRange(place.price_level),\n        rating: place.rating || 0,\n        reviewCount: place.user_ratings_total || 0,\n        address: place.formatted_address,\n        city: place.formatted_address.split(',')[1]?.trim() || '',\n        state: place.formatted_address.split(',')[2]?.trim() || '',\n        zipCode: place.formatted_address.split(',')[3]?.trim() || '',\n        phone: place.formatted_phone_number || '',\n        website: place.website || '',\n        hours: place.opening_hours?.weekday_text?.reduce((acc: any, day: string) => {\n          const [dayName, hours] = day.split(': ');\n          acc[dayName] = hours;\n          return acc;\n        }, {}) || {},\n        images: place.photos ? \n          place.photos.slice(0, 5).map((photo: any) => \n            `https://maps.googleapis.com/maps/api/place/photo?maxwidth=1200&photoreference=${photo.photo_reference}&key=${API_CONFIG.GOOGLE_PLACES_API_KEY}`\n          ) : ['https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=1200'],\n        tags: place.types || [],\n        coordinates: place.geometry?.location ? {\n          latitude: place.geometry.location.lat,\n          longitude: place.geometry.location.lng,\n        } : { latitude: 0, longitude: 0 },\n        isOpen: place.opening_hours?.open_now || false,\n        deliveryAvailable: false,\n        takeoutAvailable: false,\n        dineInAvailable: true,\n        features: [],\n        dietaryOptions: [],\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n\n      setCachedData(cacheKey, restaurant);\n      return restaurant;\n    } catch (error) {\n      console.error('Google Places Details API error:', error);\n      throw error;\n    }\n  },\n\n  async getPlaceReviews(placeId: string): Promise<any[]> {\n    const cacheKey = `reviews_${placeId}`;\n    const cached = getCachedData(cacheKey);\n    if (cached) return cached;\n\n    try {\n      const response = await axios.get(`/api/places/reviews/${placeId}`);\n      \n      if (response.data.status === 'OK' && response.data.result?.reviews) {\n        const reviews = response.data.result.reviews;\n        setCachedData(cacheKey, reviews);\n        return reviews;\n      }\n      \n      return [];\n    } catch (error) {\n      console.error('Error fetching reviews:', error);\n      return [];\n    }\n  },\n};\n\n// Yelp API\nexport const yelpAPI = {\n  async searchBusinesses(\n    latitude: number,\n    longitude: number,\n    radius: number = 5000,\n    limit: number = 20\n  ): Promise<Restaurant[]> {\n    const cacheKey = `yelp_${latitude}_${longitude}_${radius}_${limit}`;\n    const cached = getCachedData(cacheKey);\n    if (cached) return cached;\n\n    try {\n      const response = await axios.get<YelpResponse>(\n        'https://api.yelp.com/v3/businesses/search',\n        {\n          headers: {\n            Authorization: `Bearer ${API_CONFIG.YELP_API_KEY}`,\n          },\n          params: {\n            latitude,\n            longitude,\n            radius,\n            limit,\n            categories: 'restaurants',\n            sort_by: 'rating',\n          },\n        }\n      );\n\n      const restaurants: Restaurant[] = response.data.businesses.map((business) => ({\n        id: business.id,\n        name: business.name,\n        description: business.categories.map(cat => cat.title).join(', '),\n        cuisine: business.categories[0]?.title || 'restaurant',\n        priceRange: convertYelpPriceToRange(business.price),\n        rating: business.rating,\n        reviewCount: business.review_count,\n        address: business.location.address1,\n        city: business.location.city,\n        state: business.location.state,\n        zipCode: business.location.zip_code,\n        phone: business.phone,\n        website: business.url,\n        hours: {},\n        images: [business.image_url],\n        tags: business.categories.map(cat => cat.title),\n        coordinates: {\n          latitude: business.coordinates.latitude,\n          longitude: business.coordinates.longitude,\n        },\n        distance: business.distance / 1609.34, // Convert meters to miles\n        isOpen: true, // Yelp doesn't provide real-time open status\n        deliveryAvailable: business.transactions.includes('delivery'),\n        takeoutAvailable: business.transactions.includes('pickup'),\n        dineInAvailable: business.transactions.includes('restaurant_reservation'),\n        features: business.transactions,\n        dietaryOptions: [],\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      }));\n\n      setCachedData(cacheKey, restaurants);\n      return restaurants;\n    } catch (error) {\n      console.error('Yelp API error:', error);\n      throw error;\n    }\n  },\n};\n\n// AI Recommendations API\nexport const aiAPI = {\n  async getRecommendations(request: AIRecommendationRequest): Promise<AIRecommendationResponse> {\n    try {\n      const response = await axios.post<AIRecommendationResponse>(\n        `${API_CONFIG.AI_API_ENDPOINT}/recommendations`,\n        request,\n        {\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        }\n      );\n\n      return response.data;\n    } catch (error) {\n      console.error('AI Recommendations API error:', error);\n      throw error;\n    }\n  },\n\n  async analyzeUserPreferences(userId: string, ratings: any[]): Promise<any> {\n    try {\n      const response = await axios.post(\n        `${API_CONFIG.AI_API_ENDPOINT}/analyze-preferences`,\n        { userId, ratings },\n        {\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        }\n      );\n\n      return response.data;\n    } catch (error) {\n      console.error('AI Analysis API error:', error);\n      throw error;\n    }\n  },\n};\n\n// Firebase integration for user data\nexport const firebaseAPI = {\n  async saveUserRating(rating: any): Promise<void> {\n    // This would integrate with Firebase Firestore\n    console.log('Saving rating to Firebase:', rating);\n  },\n\n  async getUserRatings(userId: string): Promise<any[]> {\n    // This would fetch from Firebase Firestore\n    console.log('Fetching ratings from Firebase for user:', userId);\n    return [];\n  },\n\n  async updateUserPreferences(userId: string, preferences: any): Promise<void> {\n    // This would update Firebase Firestore\n    console.log('Updating preferences in Firebase for user:', userId, preferences);\n  },\n};\n\n// Combined API service\nexport const apiService = {\n  getPlaceAutocomplete: (input: string) => googlePlacesAPI.getPlaceAutocomplete(input),\n  getCoordinatesForAddress: (params: { address?: string; placeId?: string }) => googlePlacesAPI.getCoordinatesForAddress(params),\n  getNearbyRestaurants: (latitude: number, longitude: number, radius?: number) => googlePlacesAPI.searchNearby(latitude, longitude, radius),\n  getPlaceDetails: (placeId: string) => googlePlacesAPI.getPlaceDetails(placeId),\n\n  async getAIRecommendations(\n    userId: string,\n    userPreferences: any,\n    recentRatings: any[],\n    location: { latitude: number; longitude: number }\n  ): Promise<Restaurant[]> {\n    try {\n      const recommendations = await aiAPI.getRecommendations({\n        userId,\n        userPreferences,\n        recentRatings,\n        location,\n        limit: 10,\n      });\n\n      // Fetch full restaurant details for recommended IDs\n      const restaurants: Restaurant[] = await Promise.all(\n        recommendations.recommendations.map(async (rec) => {\n          try {\n            return await googlePlacesAPI.getPlaceDetails(rec.restaurantId);\n          } catch {\n            // Fallback to basic restaurant data\n            return {\n              id: rec.restaurantId,\n              name: 'Recommended Restaurant',\n              description: rec.reasoning,\n              cuisine: 'restaurant',\n              priceRange: 'moderate' as const,\n              rating: 0,\n              reviewCount: 0,\n              address: '',\n              city: '',\n              state: '',\n              zipCode: '',\n              phone: '',\n              hours: {},\n              images: [],\n              tags: rec.matchFactors,\n              coordinates: location,\n              isOpen: false,\n              deliveryAvailable: false,\n              takeoutAvailable: false,\n              dineInAvailable: true,\n              features: [],\n              dietaryOptions: [],\n              createdAt: new Date(),\n              updatedAt: new Date(),\n            };\n          }\n        })\n      );\n\n      return restaurants;\n    } catch (error) {\n      console.error('Error getting AI recommendations:', error);\n      throw error;\n    }\n  },\n\n  async searchRestaurants(\n    query: string,\n    location?: { latitude: number; longitude: number },\n    radius: number = 50000\n  ): Promise<Restaurant[]> {\n    try {\n      console.log('Searching restaurants with:', { query, location, radius });\n      \n      const cacheKey = `search_${query}_${location ? `${location.latitude},${location.longitude}` : 'global'}_${radius}`;\n      const cached = getCachedData(cacheKey);\n      if (cached) {\n        console.log('Returning cached results:', cached.length);\n        return cached;\n      }\n\n      const params: any = {\n        query,\n        type: 'restaurant',\n        radius,\n      };\n\n      if (location) {\n        params.location = `${location.latitude},${location.longitude}`;\n      }\n\n      console.log('Making search API call with params:', params);\n      const response = await axios.get('http://localhost:3001/api/places/search', { params });\n      \n      console.log('Search API response:', response.data);\n      \n      if (response.data.status === 'OK' && response.data.results) {\n        console.log('Found', response.data.results.length, 'restaurants');\n        \n        // Get detailed information for each restaurant to get photos\n        const restaurants = await Promise.all(\n          response.data.results.map(async (place: any) => {\n            try {\n              console.log(`Getting details for: ${place.name} (${place.place_id})`);\n              \n              // Make a separate details call to get photos\n              const detailsResponse = await axios.get(\n                'https://maps.googleapis.com/maps/api/place/details/json',\n                {\n                  params: {\n                    place_id: place.place_id,\n                    fields: 'photos,formatted_phone_number,website,opening_hours',\n                    key: API_CONFIG.GOOGLE_PLACES_API_KEY,\n                  },\n                  timeout: 15000,\n                }\n              );\n\n              console.log(`Details response for ${place.name}:`, detailsResponse.data.status);\n              \n              if (detailsResponse.data.status !== 'OK') {\n                console.error(`Details API error for ${place.name}:`, detailsResponse.data.status);\n                throw new Error(`Details API error: ${detailsResponse.data.status}`);\n              }\n\n              const details = detailsResponse.data.result;\n              console.log(`Details for ${place.name}:`, details?.photos ? `${details.photos.length} photos found` : 'No photos');\n              \n              // Check if we have photos and they're valid\n              let images = [\n                'https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=800',\n                'https://images.unsplash.com/photo-1559339352-11d035aa65de?w=800',\n                'https://images.unsplash.com/photo-1565299624946-b28f40a0ca4b?w=800'\n              ];\n              \n              if (details?.photos && details.photos.length > 0) {\n                console.log(`Processing ${details.photos.length} photos for ${place.name}`);\n                images = details.photos.slice(0, 3).map((photo: any) => {\n                  const photoUrl = `https://maps.googleapis.com/maps/api/place/photo?maxwidth=800&photoreference=${photo.photo_reference}&key=${API_CONFIG.GOOGLE_PLACES_API_KEY}`;\n                  console.log(`Generated photo URL for ${place.name}:`, photoUrl);\n                  return photoUrl;\n                });\n              } else {\n                console.log(`No photos found for ${place.name}, using fallback images`);\n              }\n              \n              return {\n                id: place.place_id,\n                name: place.name,\n                description: place.formatted_address,\n                cuisine: this.extractCuisineFromTypes(place.types),\n                priceRange: convertPriceLevelToRange(place.price_level),\n                rating: place.rating || 0,\n                reviewCount: place.user_ratings_total || 0,\n                address: place.formatted_address,\n                city: this.extractCityFromAddress(place.formatted_address),\n                state: this.extractStateFromAddress(place.formatted_address),\n                zipCode: this.extractZipFromAddress(place.formatted_address),\n                phone: details?.formatted_phone_number || '',\n                website: details?.website || '',\n                hours: details?.opening_hours || {},\n                images: images,\n                tags: place.types?.slice(0, 5) || [],\n                coordinates: {\n                  latitude: place.geometry.location.lat,\n                  longitude: place.geometry.location.lng,\n                },\n                distance: 0, // Will be calculated if location is provided\n                isOpen: details?.opening_hours?.open_now || false,\n                deliveryAvailable: false,\n                takeoutAvailable: false,\n                dineInAvailable: true,\n                features: [],\n                dietaryOptions: [],\n                createdAt: new Date(),\n                updatedAt: new Date(),\n              };\n            } catch (error) {\n              console.error('Error getting details for place:', place.place_id, error);\n              // Return basic restaurant data if details call fails\n              return {\n                id: place.place_id,\n                name: place.name,\n                description: place.formatted_address,\n                cuisine: this.extractCuisineFromTypes(place.types),\n                priceRange: convertPriceLevelToRange(place.price_level),\n                rating: place.rating || 0,\n                reviewCount: place.user_ratings_total || 0,\n                address: place.formatted_address,\n                city: this.extractCityFromAddress(place.formatted_address),\n                state: this.extractStateFromAddress(place.formatted_address),\n                zipCode: this.extractZipFromAddress(place.formatted_address),\n                phone: '',\n                website: '',\n                hours: {},\n                images: [\n                  'https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=800',\n                  'https://images.unsplash.com/photo-1559339352-11d035aa65de?w=800',\n                  'https://images.unsplash.com/photo-1565299624946-b28f40a0ca4b?w=800'\n                ],\n                tags: place.types?.slice(0, 5) || [],\n                coordinates: {\n                  latitude: place.geometry.location.lat,\n                  longitude: place.geometry.location.lng,\n                },\n                distance: 0,\n                isOpen: false,\n                deliveryAvailable: false,\n                takeoutAvailable: false,\n                dineInAvailable: true,\n                features: [],\n                dietaryOptions: [],\n                createdAt: new Date(),\n                updatedAt: new Date(),\n              };\n            }\n          })\n        );\n\n        // Calculate distances if location is provided\n        if (location) {\n          restaurants.forEach((restaurant: Restaurant) => {\n            restaurant.distance = this.calculateDistance(\n              location.latitude,\n              location.longitude,\n              restaurant.coordinates.latitude,\n              restaurant.coordinates.longitude\n            );\n          });\n        }\n\n        setCachedData(cacheKey, restaurants);\n        console.log('Returning', restaurants.length, 'processed restaurants');\n        return restaurants;\n      }\n      \n      console.log('No results found or API error');\n      return [];\n    } catch (error) {\n      console.error('Error searching restaurants:', error);\n      return [];\n    }\n  },\n\n  extractCuisineFromTypes(types: string[]): string {\n    const cuisineTypes = [\n      'restaurant', 'food', 'meal_takeaway', 'meal_delivery',\n      'american_restaurant', 'italian_restaurant', 'chinese_restaurant',\n      'japanese_restaurant', 'mexican_restaurant', 'indian_restaurant',\n      'thai_restaurant', 'vietnamese_restaurant', 'korean_restaurant',\n      'french_restaurant', 'greek_restaurant', 'mediterranean_restaurant',\n      'pizza_restaurant', 'burger_restaurant', 'seafood_restaurant',\n      'steakhouse', 'barbecue_restaurant', 'sushi_restaurant'\n    ];\n\n    for (const type of types) {\n      if (cuisineTypes.includes(type)) {\n        return type.replace('_restaurant', '').replace('_', ' ').replace(/\\b\\w/g, l => l.toUpperCase());\n      }\n    }\n    return 'Restaurant';\n  },\n\n  extractCityFromAddress(address: string): string {\n    const parts = address.split(',');\n    if (parts.length >= 2) {\n      return parts[1]?.trim() || '';\n    }\n    return '';\n  },\n\n  extractStateFromAddress(address: string): string {\n    const parts = address.split(',');\n    if (parts.length >= 3) {\n      const statePart = parts[2]?.trim();\n      return statePart?.split(' ')[0] || '';\n    }\n    return '';\n  },\n\n  extractZipFromAddress(address: string): string {\n    const parts = address.split(',');\n    if (parts.length >= 3) {\n      const statePart = parts[2]?.trim();\n      const zipMatch = statePart?.match(/\\d{5}/);\n      return zipMatch ? zipMatch[0] : '';\n    }\n    return '';\n  },\n\n  calculateDistance(lat1: number, lon1: number, lat2: number, lon2: number): number {\n    // Implement the Haversine formula to calculate distance between two points\n    const R = 3959; // Earth's radius in miles\n    const dLat = (lat2 - lat1) * Math.PI / 180;\n    const dLon = (lon2 - lon1) * Math.PI / 180;\n    const a = Math.sin(dLat/2) * Math.sin(dLat/2) +\n              Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *\n              Math.sin(dLon/2) * Math.sin(dLon/2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n    return R * c;\n  },\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}