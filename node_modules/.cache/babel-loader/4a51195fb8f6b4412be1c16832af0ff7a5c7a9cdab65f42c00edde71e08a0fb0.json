{"ast":null,"code":"import axios from 'axios';\n// API Configuration\nconst API_CONFIG = {\n  GOOGLE_PLACES_API_KEY: 'AIzaSyDjtvrqfAfoBvmU6JjH7v1wZek0SLP-40o',\n  YELP_API_KEY: process.env.REACT_APP_YELP_API_KEY,\n  AI_API_ENDPOINT: process.env.REACT_APP_AI_API_ENDPOINT,\n  FIREBASE_CONFIG: {\n    apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n    authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n    projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n    appId: process.env.REACT_APP_FIREBASE_APP_ID\n  }\n};\n\n// Cache for API responses\nconst cache = new Map();\nconst CACHE_DURATION = 5 * 60 * 1000; // 5 minutes\n\n// Helper function to get cached data\nconst getCachedData = key => {\n  const cached = cache.get(key);\n  if (cached && Date.now() - cached.timestamp < CACHE_DURATION) {\n    return cached.data;\n  }\n  return null;\n};\n\n// Helper function to set cached data\nconst setCachedData = (key, data) => {\n  cache.set(key, {\n    data,\n    timestamp: Date.now()\n  });\n};\n\n// Helper function to convert price level to price range\nconst convertPriceLevelToRange = priceLevel => {\n  if (!priceLevel) return 'moderate';\n  switch (priceLevel) {\n    case 1:\n      return 'budget';\n    case 2:\n      return 'moderate';\n    case 3:\n      return 'expensive';\n    case 4:\n      return 'luxury';\n    default:\n      return 'moderate';\n  }\n};\n\n// Helper function to convert Yelp price to price range\nconst convertYelpPriceToRange = price => {\n  if (!price) return 'moderate';\n  switch (price) {\n    case '$':\n      return 'budget';\n    case '$$':\n      return 'moderate';\n    case '$$$':\n      return 'expensive';\n    case '$$$$':\n      return 'luxury';\n    default:\n      return 'moderate';\n  }\n};\n\n// Google Places API\nexport const googlePlacesAPI = {\n  async searchNearby(latitude, longitude, radius = 5000, type = 'restaurant') {\n    const cacheKey = `google_places_${latitude}_${longitude}_${radius}_${type}`;\n    const cached = getCachedData(cacheKey);\n    if (cached) return cached;\n    try {\n      console.log('Fetching restaurants from Google Places API...');\n      console.log('Location:', latitude, longitude);\n      console.log('Radius:', radius);\n      const response = await axios.get('https://maps.googleapis.com/maps/api/place/nearbysearch/json', {\n        params: {\n          location: `${latitude},${longitude}`,\n          radius,\n          type,\n          key: API_CONFIG.GOOGLE_PLACES_API_KEY,\n          rankby: 'rating',\n          // Sort by rating\n          opennow: true // Only show open restaurants\n        },\n        timeout: 10000 // 10 second timeout\n      });\n      console.log('Google Places API response:', response.data);\n      if (response.data.status !== 'OK' && response.data.status !== 'ZERO_RESULTS') {\n        throw new Error(`Google Places API error: ${response.data.status} - ${response.data.error_message || 'Unknown error'}`);\n      }\n      if (response.data.status === 'ZERO_RESULTS') {\n        console.log('No restaurants found nearby');\n        return [];\n      }\n      const restaurants = response.data.results.map(place => {\n        var _place$types, _place$types2, _place$vicinity, _place$vicinity$split, _place$vicinity2, _place$vicinity2$spli, _place$opening_hours;\n        return {\n          id: place.place_id,\n          name: place.name,\n          description: ((_place$types = place.types) === null || _place$types === void 0 ? void 0 : _place$types.join(', ')) || 'Restaurant',\n          cuisine: ((_place$types2 = place.types) === null || _place$types2 === void 0 ? void 0 : _place$types2[0]) || 'restaurant',\n          priceRange: convertPriceLevelToRange(place.price_level),\n          rating: place.rating || 0,\n          reviewCount: place.user_ratings_total || 0,\n          address: place.vicinity || place.formatted_address || '',\n          city: ((_place$vicinity = place.vicinity) === null || _place$vicinity === void 0 ? void 0 : (_place$vicinity$split = _place$vicinity.split(',')[1]) === null || _place$vicinity$split === void 0 ? void 0 : _place$vicinity$split.trim()) || '',\n          state: ((_place$vicinity2 = place.vicinity) === null || _place$vicinity2 === void 0 ? void 0 : (_place$vicinity2$spli = _place$vicinity2.split(',')[2]) === null || _place$vicinity2$spli === void 0 ? void 0 : _place$vicinity2$spli.trim()) || '',\n          zipCode: '',\n          phone: '',\n          website: '',\n          hours: {},\n          images: place.photos ? place.photos.slice(0, 3).map(photo => `https://maps.googleapis.com/maps/api/place/photo?maxwidth=400&photoreference=${photo.photo_reference}&key=${API_CONFIG.GOOGLE_PLACES_API_KEY}`) : ['https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=800'],\n          tags: place.types || [],\n          coordinates: {\n            latitude: place.geometry.location.lat,\n            longitude: place.geometry.location.lng\n          },\n          distance: 0,\n          // Will be calculated later\n          isOpen: ((_place$opening_hours = place.opening_hours) === null || _place$opening_hours === void 0 ? void 0 : _place$opening_hours.open_now) || false,\n          deliveryAvailable: false,\n          takeoutAvailable: false,\n          dineInAvailable: true,\n          features: [],\n          dietaryOptions: [],\n          createdAt: new Date(),\n          updatedAt: new Date()\n        };\n      });\n\n      // Calculate distances\n      restaurants.forEach(restaurant => {\n        const lat1 = latitude;\n        const lon1 = longitude;\n        const lat2 = restaurant.coordinates.latitude;\n        const lon2 = restaurant.coordinates.longitude;\n\n        // Haversine formula to calculate distance\n        const R = 3959; // Earth's radius in miles\n        const dLat = (lat2 - lat1) * Math.PI / 180;\n        const dLon = (lon2 - lon1) * Math.PI / 180;\n        const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n        restaurant.distance = R * c;\n      });\n\n      // Sort by distance\n      restaurants.sort((a, b) => (a.distance || 0) - (b.distance || 0));\n      console.log(`Found ${restaurants.length} restaurants`);\n      setCachedData(cacheKey, restaurants);\n      return restaurants;\n    } catch (error) {\n      console.error('Google Places API error:', error);\n\n      // Return fallback data if API fails\n      if (axios.isAxiosError(error)) {\n        var _error$response, _error$response2, _error$response2$data;\n        console.error('Axios error details:', (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data);\n        throw new Error(`Failed to fetch restaurants: ${((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error_message) || error.message}`);\n      }\n      throw new Error(`Failed to fetch restaurants: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  },\n  async getPlaceDetails(placeId) {\n    const cacheKey = `google_place_details_${placeId}`;\n    const cached = getCachedData(cacheKey);\n    if (cached) return cached;\n    try {\n      var _place$types3, _place$types4, _place$formatted_addr, _place$formatted_addr2, _place$formatted_addr3, _place$opening_hours2, _place$opening_hours3, _place$geometry, _place$opening_hours4;\n      const response = await axios.get('https://maps.googleapis.com/maps/api/place/details/json', {\n        params: {\n          place_id: placeId,\n          fields: 'name,formatted_address,formatted_phone_number,website,opening_hours,rating,user_ratings_total,photos,types,price_level,geometry',\n          key: API_CONFIG.GOOGLE_PLACES_API_KEY\n        },\n        timeout: 10000\n      });\n      if (response.data.status !== 'OK') {\n        throw new Error(`Google Places Details API error: ${response.data.status}`);\n      }\n      const place = response.data.result;\n      const restaurant = {\n        id: placeId,\n        name: place.name,\n        description: ((_place$types3 = place.types) === null || _place$types3 === void 0 ? void 0 : _place$types3.join(', ')) || '',\n        cuisine: ((_place$types4 = place.types) === null || _place$types4 === void 0 ? void 0 : _place$types4[0]) || 'restaurant',\n        priceRange: convertPriceLevelToRange(place.price_level),\n        rating: place.rating || 0,\n        reviewCount: place.user_ratings_total || 0,\n        address: place.formatted_address,\n        city: ((_place$formatted_addr = place.formatted_address.split(',')[1]) === null || _place$formatted_addr === void 0 ? void 0 : _place$formatted_addr.trim()) || '',\n        state: ((_place$formatted_addr2 = place.formatted_address.split(',')[2]) === null || _place$formatted_addr2 === void 0 ? void 0 : _place$formatted_addr2.trim()) || '',\n        zipCode: ((_place$formatted_addr3 = place.formatted_address.split(',')[3]) === null || _place$formatted_addr3 === void 0 ? void 0 : _place$formatted_addr3.trim()) || '',\n        phone: place.formatted_phone_number || '',\n        website: place.website || '',\n        hours: ((_place$opening_hours2 = place.opening_hours) === null || _place$opening_hours2 === void 0 ? void 0 : (_place$opening_hours3 = _place$opening_hours2.weekday_text) === null || _place$opening_hours3 === void 0 ? void 0 : _place$opening_hours3.reduce((acc, day) => {\n          const [dayName, hours] = day.split(': ');\n          acc[dayName] = hours;\n          return acc;\n        }, {})) || {},\n        images: place.photos ? place.photos.slice(0, 5).map(photo => `https://maps.googleapis.com/maps/api/place/photo?maxwidth=400&photoreference=${photo.photo_reference}&key=${API_CONFIG.GOOGLE_PLACES_API_KEY}`) : ['https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=800'],\n        tags: place.types || [],\n        coordinates: (_place$geometry = place.geometry) !== null && _place$geometry !== void 0 && _place$geometry.location ? {\n          latitude: place.geometry.location.lat,\n          longitude: place.geometry.location.lng\n        } : {\n          latitude: 0,\n          longitude: 0\n        },\n        isOpen: ((_place$opening_hours4 = place.opening_hours) === null || _place$opening_hours4 === void 0 ? void 0 : _place$opening_hours4.open_now) || false,\n        deliveryAvailable: false,\n        takeoutAvailable: false,\n        dineInAvailable: true,\n        features: [],\n        dietaryOptions: [],\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n      setCachedData(cacheKey, restaurant);\n      return restaurant;\n    } catch (error) {\n      console.error('Google Places Details API error:', error);\n      throw error;\n    }\n  },\n  async getPlaceReviews(placeId) {\n    const cacheKey = `google_place_reviews_${placeId}`;\n    const cached = getCachedData(cacheKey);\n    if (cached) return cached;\n    try {\n      const response = await axios.get('https://maps.googleapis.com/maps/api/place/details/json', {\n        params: {\n          place_id: placeId,\n          fields: 'reviews',\n          key: API_CONFIG.GOOGLE_PLACES_API_KEY\n        },\n        timeout: 10000\n      });\n      if (response.data.status !== 'OK') {\n        throw new Error(`Google Places Reviews API error: ${response.data.status}`);\n      }\n      const reviews = response.data.result.reviews || [];\n      setCachedData(cacheKey, reviews);\n      return reviews;\n    } catch (error) {\n      console.error('Google Places Reviews API error:', error);\n      return []; // Return empty array instead of throwing\n    }\n  }\n};\n\n// Yelp API\nexport const yelpAPI = {\n  async searchBusinesses(latitude, longitude, radius = 5000, limit = 20) {\n    const cacheKey = `yelp_${latitude}_${longitude}_${radius}_${limit}`;\n    const cached = getCachedData(cacheKey);\n    if (cached) return cached;\n    try {\n      const response = await axios.get('https://api.yelp.com/v3/businesses/search', {\n        headers: {\n          Authorization: `Bearer ${API_CONFIG.YELP_API_KEY}`\n        },\n        params: {\n          latitude,\n          longitude,\n          radius,\n          limit,\n          categories: 'restaurants',\n          sort_by: 'rating'\n        }\n      });\n      const restaurants = response.data.businesses.map(business => {\n        var _business$categories$;\n        return {\n          id: business.id,\n          name: business.name,\n          description: business.categories.map(cat => cat.title).join(', '),\n          cuisine: ((_business$categories$ = business.categories[0]) === null || _business$categories$ === void 0 ? void 0 : _business$categories$.title) || 'restaurant',\n          priceRange: convertYelpPriceToRange(business.price),\n          rating: business.rating,\n          reviewCount: business.review_count,\n          address: business.location.address1,\n          city: business.location.city,\n          state: business.location.state,\n          zipCode: business.location.zip_code,\n          phone: business.phone,\n          website: business.url,\n          hours: {},\n          images: [business.image_url],\n          tags: business.categories.map(cat => cat.title),\n          coordinates: {\n            latitude: business.coordinates.latitude,\n            longitude: business.coordinates.longitude\n          },\n          distance: business.distance / 1609.34,\n          // Convert meters to miles\n          isOpen: true,\n          // Yelp doesn't provide real-time open status\n          deliveryAvailable: business.transactions.includes('delivery'),\n          takeoutAvailable: business.transactions.includes('pickup'),\n          dineInAvailable: business.transactions.includes('restaurant_reservation'),\n          features: business.transactions,\n          dietaryOptions: [],\n          createdAt: new Date(),\n          updatedAt: new Date()\n        };\n      });\n      setCachedData(cacheKey, restaurants);\n      return restaurants;\n    } catch (error) {\n      console.error('Yelp API error:', error);\n      throw error;\n    }\n  }\n};\n\n// AI Recommendations API\nexport const aiAPI = {\n  async getRecommendations(request) {\n    try {\n      const response = await axios.post(`${API_CONFIG.AI_API_ENDPOINT}/recommendations`, request, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('AI Recommendations API error:', error);\n      throw error;\n    }\n  },\n  async analyzeUserPreferences(userId, ratings) {\n    try {\n      const response = await axios.post(`${API_CONFIG.AI_API_ENDPOINT}/analyze-preferences`, {\n        userId,\n        ratings\n      }, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('AI Analysis API error:', error);\n      throw error;\n    }\n  }\n};\n\n// Firebase integration for user data\nexport const firebaseAPI = {\n  async saveUserRating(rating) {\n    // This would integrate with Firebase Firestore\n    console.log('Saving rating to Firebase:', rating);\n  },\n  async getUserRatings(userId) {\n    // This would fetch from Firebase Firestore\n    console.log('Fetching ratings from Firebase for user:', userId);\n    return [];\n  },\n  async updateUserPreferences(userId, preferences) {\n    // This would update Firebase Firestore\n    console.log('Updating preferences in Firebase for user:', userId, preferences);\n  }\n};\n\n// Combined API service\nexport const apiService = {\n  async getNearbyRestaurants(latitude, longitude, radius = 5000) {\n    try {\n      // Try Google Places first, fallback to Yelp\n      const googleResults = await googlePlacesAPI.searchNearby(latitude, longitude, radius);\n      if (googleResults.length > 0) {\n        return googleResults;\n      }\n      const yelpResults = await yelpAPI.searchBusinesses(latitude, longitude, radius);\n      return yelpResults;\n    } catch (error) {\n      console.error('Error fetching nearby restaurants:', error);\n      throw error;\n    }\n  },\n  async getAIRecommendations(userId, userPreferences, recentRatings, location) {\n    try {\n      const recommendations = await aiAPI.getRecommendations({\n        userId,\n        userPreferences,\n        recentRatings,\n        location,\n        limit: 10\n      });\n\n      // Fetch full restaurant details for recommended IDs\n      const restaurants = await Promise.all(recommendations.recommendations.map(async rec => {\n        try {\n          return await googlePlacesAPI.getPlaceDetails(rec.restaurantId);\n        } catch {\n          // Fallback to basic restaurant data\n          return {\n            id: rec.restaurantId,\n            name: 'Recommended Restaurant',\n            description: rec.reasoning,\n            cuisine: 'restaurant',\n            priceRange: 'moderate',\n            rating: 0,\n            reviewCount: 0,\n            address: '',\n            city: '',\n            state: '',\n            zipCode: '',\n            phone: '',\n            hours: {},\n            images: [],\n            tags: rec.matchFactors,\n            coordinates: location,\n            isOpen: false,\n            deliveryAvailable: false,\n            takeoutAvailable: false,\n            dineInAvailable: true,\n            features: [],\n            dietaryOptions: [],\n            createdAt: new Date(),\n            updatedAt: new Date()\n          };\n        }\n      }));\n      return restaurants;\n    } catch (error) {\n      console.error('Error getting AI recommendations:', error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["axios","API_CONFIG","GOOGLE_PLACES_API_KEY","YELP_API_KEY","process","env","REACT_APP_YELP_API_KEY","AI_API_ENDPOINT","REACT_APP_AI_API_ENDPOINT","FIREBASE_CONFIG","apiKey","REACT_APP_FIREBASE_API_KEY","authDomain","REACT_APP_FIREBASE_AUTH_DOMAIN","projectId","REACT_APP_FIREBASE_PROJECT_ID","storageBucket","REACT_APP_FIREBASE_STORAGE_BUCKET","messagingSenderId","REACT_APP_FIREBASE_MESSAGING_SENDER_ID","appId","REACT_APP_FIREBASE_APP_ID","cache","Map","CACHE_DURATION","getCachedData","key","cached","get","Date","now","timestamp","data","setCachedData","set","convertPriceLevelToRange","priceLevel","convertYelpPriceToRange","price","googlePlacesAPI","searchNearby","latitude","longitude","radius","type","cacheKey","console","log","response","params","location","rankby","opennow","timeout","status","Error","error_message","restaurants","results","map","place","_place$types","_place$types2","_place$vicinity","_place$vicinity$split","_place$vicinity2","_place$vicinity2$spli","_place$opening_hours","id","place_id","name","description","types","join","cuisine","priceRange","price_level","rating","reviewCount","user_ratings_total","address","vicinity","formatted_address","city","split","trim","state","zipCode","phone","website","hours","images","photos","slice","photo","photo_reference","tags","coordinates","geometry","lat","lng","distance","isOpen","opening_hours","open_now","deliveryAvailable","takeoutAvailable","dineInAvailable","features","dietaryOptions","createdAt","updatedAt","forEach","restaurant","lat1","lon1","lat2","lon2","R","dLat","Math","PI","dLon","a","sin","cos","c","atan2","sqrt","sort","b","length","error","isAxiosError","_error$response","_error$response2","_error$response2$data","message","getPlaceDetails","placeId","_place$types3","_place$types4","_place$formatted_addr","_place$formatted_addr2","_place$formatted_addr3","_place$opening_hours2","_place$opening_hours3","_place$geometry","_place$opening_hours4","fields","result","formatted_phone_number","weekday_text","reduce","acc","day","dayName","getPlaceReviews","reviews","yelpAPI","searchBusinesses","limit","headers","Authorization","categories","sort_by","businesses","business","_business$categories$","cat","title","review_count","address1","zip_code","url","image_url","transactions","includes","aiAPI","getRecommendations","request","post","analyzeUserPreferences","userId","ratings","firebaseAPI","saveUserRating","getUserRatings","updateUserPreferences","preferences","apiService","getNearbyRestaurants","googleResults","yelpResults","getAIRecommendations","userPreferences","recentRatings","recommendations","Promise","all","rec","restaurantId","reasoning","matchFactors"],"sources":["/Users/andrewnguyen/scrollEats/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\nimport { Restaurant, GooglePlacesResponse, YelpResponse, AIRecommendationRequest, AIRecommendationResponse } from '../types';\n\n// API Configuration\nconst API_CONFIG = {\n  GOOGLE_PLACES_API_KEY: 'AIzaSyDjtvrqfAfoBvmU6JjH7v1wZek0SLP-40o',\n  YELP_API_KEY: process.env.REACT_APP_YELP_API_KEY,\n  AI_API_ENDPOINT: process.env.REACT_APP_AI_API_ENDPOINT,\n  FIREBASE_CONFIG: {\n    apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n    authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n    projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n    appId: process.env.REACT_APP_FIREBASE_APP_ID,\n  },\n};\n\n// Cache for API responses\nconst cache = new Map<string, { data: any; timestamp: number }>();\nconst CACHE_DURATION = 5 * 60 * 1000; // 5 minutes\n\n// Helper function to get cached data\nconst getCachedData = (key: string) => {\n  const cached = cache.get(key);\n  if (cached && Date.now() - cached.timestamp < CACHE_DURATION) {\n    return cached.data;\n  }\n  return null;\n};\n\n// Helper function to set cached data\nconst setCachedData = (key: string, data: any) => {\n  cache.set(key, { data, timestamp: Date.now() });\n};\n\n// Helper function to convert price level to price range\nconst convertPriceLevelToRange = (priceLevel?: number): Restaurant['priceRange'] => {\n  if (!priceLevel) return 'moderate';\n  switch (priceLevel) {\n    case 1: return 'budget';\n    case 2: return 'moderate';\n    case 3: return 'expensive';\n    case 4: return 'luxury';\n    default: return 'moderate';\n  }\n};\n\n// Helper function to convert Yelp price to price range\nconst convertYelpPriceToRange = (price?: string): Restaurant['priceRange'] => {\n  if (!price) return 'moderate';\n  switch (price) {\n    case '$': return 'budget';\n    case '$$': return 'moderate';\n    case '$$$': return 'expensive';\n    case '$$$$': return 'luxury';\n    default: return 'moderate';\n  }\n};\n\n// Google Places API\nexport const googlePlacesAPI = {\n  async searchNearby(\n    latitude: number,\n    longitude: number,\n    radius: number = 5000,\n    type: string = 'restaurant'\n  ): Promise<Restaurant[]> {\n    const cacheKey = `google_places_${latitude}_${longitude}_${radius}_${type}`;\n    const cached = getCachedData(cacheKey);\n    if (cached) return cached;\n\n    try {\n      console.log('Fetching restaurants from Google Places API...');\n      console.log('Location:', latitude, longitude);\n      console.log('Radius:', radius);\n      \n      const response = await axios.get<GooglePlacesResponse>(\n        'https://maps.googleapis.com/maps/api/place/nearbysearch/json',\n        {\n          params: {\n            location: `${latitude},${longitude}`,\n            radius,\n            type,\n            key: API_CONFIG.GOOGLE_PLACES_API_KEY,\n            rankby: 'rating', // Sort by rating\n            opennow: true, // Only show open restaurants\n          },\n          timeout: 10000, // 10 second timeout\n        }\n      );\n\n      console.log('Google Places API response:', response.data);\n\n      if (response.data.status !== 'OK' && response.data.status !== 'ZERO_RESULTS') {\n        throw new Error(`Google Places API error: ${response.data.status} - ${response.data.error_message || 'Unknown error'}`);\n      }\n\n      if (response.data.status === 'ZERO_RESULTS') {\n        console.log('No restaurants found nearby');\n        return [];\n      }\n\n      const restaurants: Restaurant[] = response.data.results.map((place) => ({\n        id: place.place_id,\n        name: place.name,\n        description: place.types?.join(', ') || 'Restaurant',\n        cuisine: place.types?.[0] || 'restaurant',\n        priceRange: convertPriceLevelToRange(place.price_level),\n        rating: place.rating || 0,\n        reviewCount: place.user_ratings_total || 0,\n        address: place.vicinity || place.formatted_address || '',\n        city: place.vicinity?.split(',')[1]?.trim() || '',\n        state: place.vicinity?.split(',')[2]?.trim() || '',\n        zipCode: '',\n        phone: '',\n        website: '',\n        hours: {},\n        images: place.photos ? \n          place.photos.slice(0, 3).map(photo => \n            `https://maps.googleapis.com/maps/api/place/photo?maxwidth=400&photoreference=${photo.photo_reference}&key=${API_CONFIG.GOOGLE_PLACES_API_KEY}`\n          ) : ['https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=800'],\n        tags: place.types || [],\n        coordinates: {\n          latitude: place.geometry.location.lat,\n          longitude: place.geometry.location.lng,\n        },\n        distance: 0, // Will be calculated later\n        isOpen: place.opening_hours?.open_now || false,\n        deliveryAvailable: false,\n        takeoutAvailable: false,\n        dineInAvailable: true,\n        features: [],\n        dietaryOptions: [],\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      }));\n\n      // Calculate distances\n      restaurants.forEach(restaurant => {\n        const lat1 = latitude;\n        const lon1 = longitude;\n        const lat2 = restaurant.coordinates.latitude;\n        const lon2 = restaurant.coordinates.longitude;\n        \n        // Haversine formula to calculate distance\n        const R = 3959; // Earth's radius in miles\n        const dLat = (lat2 - lat1) * Math.PI / 180;\n        const dLon = (lon2 - lon1) * Math.PI / 180;\n        const a = Math.sin(dLat/2) * Math.sin(dLat/2) +\n                  Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *\n                  Math.sin(dLon/2) * Math.sin(dLon/2);\n        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n        restaurant.distance = R * c;\n      });\n\n      // Sort by distance\n      restaurants.sort((a, b) => (a.distance || 0) - (b.distance || 0));\n\n      console.log(`Found ${restaurants.length} restaurants`);\n      setCachedData(cacheKey, restaurants);\n      return restaurants;\n    } catch (error) {\n      console.error('Google Places API error:', error);\n      \n      // Return fallback data if API fails\n      if (axios.isAxiosError(error)) {\n        console.error('Axios error details:', error.response?.data);\n        throw new Error(`Failed to fetch restaurants: ${error.response?.data?.error_message || error.message}`);\n      }\n      \n      throw new Error(`Failed to fetch restaurants: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  },\n\n  async getPlaceDetails(placeId: string): Promise<Restaurant> {\n    const cacheKey = `google_place_details_${placeId}`;\n    const cached = getCachedData(cacheKey);\n    if (cached) return cached;\n\n    try {\n      const response = await axios.get(\n        'https://maps.googleapis.com/maps/api/place/details/json',\n        {\n          params: {\n            place_id: placeId,\n            fields: 'name,formatted_address,formatted_phone_number,website,opening_hours,rating,user_ratings_total,photos,types,price_level,geometry',\n            key: API_CONFIG.GOOGLE_PLACES_API_KEY,\n          },\n          timeout: 10000,\n        }\n      );\n\n      if (response.data.status !== 'OK') {\n        throw new Error(`Google Places Details API error: ${response.data.status}`);\n      }\n\n      const place = response.data.result;\n      const restaurant: Restaurant = {\n        id: placeId,\n        name: place.name,\n        description: place.types?.join(', ') || '',\n        cuisine: place.types?.[0] || 'restaurant',\n        priceRange: convertPriceLevelToRange(place.price_level),\n        rating: place.rating || 0,\n        reviewCount: place.user_ratings_total || 0,\n        address: place.formatted_address,\n        city: place.formatted_address.split(',')[1]?.trim() || '',\n        state: place.formatted_address.split(',')[2]?.trim() || '',\n        zipCode: place.formatted_address.split(',')[3]?.trim() || '',\n        phone: place.formatted_phone_number || '',\n        website: place.website || '',\n        hours: place.opening_hours?.weekday_text?.reduce((acc: any, day: string) => {\n          const [dayName, hours] = day.split(': ');\n          acc[dayName] = hours;\n          return acc;\n        }, {}) || {},\n        images: place.photos ? \n          place.photos.slice(0, 5).map((photo: any) => \n            `https://maps.googleapis.com/maps/api/place/photo?maxwidth=400&photoreference=${photo.photo_reference}&key=${API_CONFIG.GOOGLE_PLACES_API_KEY}`\n          ) : ['https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=800'],\n        tags: place.types || [],\n        coordinates: place.geometry?.location ? {\n          latitude: place.geometry.location.lat,\n          longitude: place.geometry.location.lng,\n        } : { latitude: 0, longitude: 0 },\n        isOpen: place.opening_hours?.open_now || false,\n        deliveryAvailable: false,\n        takeoutAvailable: false,\n        dineInAvailable: true,\n        features: [],\n        dietaryOptions: [],\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n\n      setCachedData(cacheKey, restaurant);\n      return restaurant;\n    } catch (error) {\n      console.error('Google Places Details API error:', error);\n      throw error;\n    }\n  },\n\n  async getPlaceReviews(placeId: string): Promise<any[]> {\n    const cacheKey = `google_place_reviews_${placeId}`;\n    const cached = getCachedData(cacheKey);\n    if (cached) return cached;\n\n    try {\n      const response = await axios.get(\n        'https://maps.googleapis.com/maps/api/place/details/json',\n        {\n          params: {\n            place_id: placeId,\n            fields: 'reviews',\n            key: API_CONFIG.GOOGLE_PLACES_API_KEY,\n          },\n          timeout: 10000,\n        }\n      );\n\n      if (response.data.status !== 'OK') {\n        throw new Error(`Google Places Reviews API error: ${response.data.status}`);\n      }\n\n      const reviews = response.data.result.reviews || [];\n      setCachedData(cacheKey, reviews);\n      return reviews;\n    } catch (error) {\n      console.error('Google Places Reviews API error:', error);\n      return []; // Return empty array instead of throwing\n    }\n  },\n};\n\n// Yelp API\nexport const yelpAPI = {\n  async searchBusinesses(\n    latitude: number,\n    longitude: number,\n    radius: number = 5000,\n    limit: number = 20\n  ): Promise<Restaurant[]> {\n    const cacheKey = `yelp_${latitude}_${longitude}_${radius}_${limit}`;\n    const cached = getCachedData(cacheKey);\n    if (cached) return cached;\n\n    try {\n      const response = await axios.get<YelpResponse>(\n        'https://api.yelp.com/v3/businesses/search',\n        {\n          headers: {\n            Authorization: `Bearer ${API_CONFIG.YELP_API_KEY}`,\n          },\n          params: {\n            latitude,\n            longitude,\n            radius,\n            limit,\n            categories: 'restaurants',\n            sort_by: 'rating',\n          },\n        }\n      );\n\n      const restaurants: Restaurant[] = response.data.businesses.map((business) => ({\n        id: business.id,\n        name: business.name,\n        description: business.categories.map(cat => cat.title).join(', '),\n        cuisine: business.categories[0]?.title || 'restaurant',\n        priceRange: convertYelpPriceToRange(business.price),\n        rating: business.rating,\n        reviewCount: business.review_count,\n        address: business.location.address1,\n        city: business.location.city,\n        state: business.location.state,\n        zipCode: business.location.zip_code,\n        phone: business.phone,\n        website: business.url,\n        hours: {},\n        images: [business.image_url],\n        tags: business.categories.map(cat => cat.title),\n        coordinates: {\n          latitude: business.coordinates.latitude,\n          longitude: business.coordinates.longitude,\n        },\n        distance: business.distance / 1609.34, // Convert meters to miles\n        isOpen: true, // Yelp doesn't provide real-time open status\n        deliveryAvailable: business.transactions.includes('delivery'),\n        takeoutAvailable: business.transactions.includes('pickup'),\n        dineInAvailable: business.transactions.includes('restaurant_reservation'),\n        features: business.transactions,\n        dietaryOptions: [],\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      }));\n\n      setCachedData(cacheKey, restaurants);\n      return restaurants;\n    } catch (error) {\n      console.error('Yelp API error:', error);\n      throw error;\n    }\n  },\n};\n\n// AI Recommendations API\nexport const aiAPI = {\n  async getRecommendations(request: AIRecommendationRequest): Promise<AIRecommendationResponse> {\n    try {\n      const response = await axios.post<AIRecommendationResponse>(\n        `${API_CONFIG.AI_API_ENDPOINT}/recommendations`,\n        request,\n        {\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        }\n      );\n\n      return response.data;\n    } catch (error) {\n      console.error('AI Recommendations API error:', error);\n      throw error;\n    }\n  },\n\n  async analyzeUserPreferences(userId: string, ratings: any[]): Promise<any> {\n    try {\n      const response = await axios.post(\n        `${API_CONFIG.AI_API_ENDPOINT}/analyze-preferences`,\n        { userId, ratings },\n        {\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        }\n      );\n\n      return response.data;\n    } catch (error) {\n      console.error('AI Analysis API error:', error);\n      throw error;\n    }\n  },\n};\n\n// Firebase integration for user data\nexport const firebaseAPI = {\n  async saveUserRating(rating: any): Promise<void> {\n    // This would integrate with Firebase Firestore\n    console.log('Saving rating to Firebase:', rating);\n  },\n\n  async getUserRatings(userId: string): Promise<any[]> {\n    // This would fetch from Firebase Firestore\n    console.log('Fetching ratings from Firebase for user:', userId);\n    return [];\n  },\n\n  async updateUserPreferences(userId: string, preferences: any): Promise<void> {\n    // This would update Firebase Firestore\n    console.log('Updating preferences in Firebase for user:', userId, preferences);\n  },\n};\n\n// Combined API service\nexport const apiService = {\n  async getNearbyRestaurants(\n    latitude: number,\n    longitude: number,\n    radius: number = 5000\n  ): Promise<Restaurant[]> {\n    try {\n      // Try Google Places first, fallback to Yelp\n      const googleResults = await googlePlacesAPI.searchNearby(latitude, longitude, radius);\n      if (googleResults.length > 0) {\n        return googleResults;\n      }\n\n      const yelpResults = await yelpAPI.searchBusinesses(latitude, longitude, radius);\n      return yelpResults;\n    } catch (error) {\n      console.error('Error fetching nearby restaurants:', error);\n      throw error;\n    }\n  },\n\n  async getAIRecommendations(\n    userId: string,\n    userPreferences: any,\n    recentRatings: any[],\n    location: { latitude: number; longitude: number }\n  ): Promise<Restaurant[]> {\n    try {\n      const recommendations = await aiAPI.getRecommendations({\n        userId,\n        userPreferences,\n        recentRatings,\n        location,\n        limit: 10,\n      });\n\n      // Fetch full restaurant details for recommended IDs\n      const restaurants: Restaurant[] = await Promise.all(\n        recommendations.recommendations.map(async (rec) => {\n          try {\n            return await googlePlacesAPI.getPlaceDetails(rec.restaurantId);\n          } catch {\n            // Fallback to basic restaurant data\n            return {\n              id: rec.restaurantId,\n              name: 'Recommended Restaurant',\n              description: rec.reasoning,\n              cuisine: 'restaurant',\n              priceRange: 'moderate' as const,\n              rating: 0,\n              reviewCount: 0,\n              address: '',\n              city: '',\n              state: '',\n              zipCode: '',\n              phone: '',\n              hours: {},\n              images: [],\n              tags: rec.matchFactors,\n              coordinates: location,\n              isOpen: false,\n              deliveryAvailable: false,\n              takeoutAvailable: false,\n              dineInAvailable: true,\n              features: [],\n              dietaryOptions: [],\n              createdAt: new Date(),\n              updatedAt: new Date(),\n            };\n          }\n        })\n      );\n\n      return restaurants;\n    } catch (error) {\n      console.error('Error getting AI recommendations:', error);\n      throw error;\n    }\n  },\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}